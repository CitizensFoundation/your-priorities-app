import { YpBaseElement } from "../common/yp-base-element.js";
import "@material/web/button/filled-button.js";
import "@material/web/radio/radio.js";
import * as RecordRTC from "recordrtc";
import "@material/web/dialog/dialog.js";
import "@material/web/checkbox/checkbox.js";
import "@material/web/radio/radio.js";
export declare class YpMediaRecorder extends YpBaseElement {
    recorder: RecordRTC | undefined;
    mediaStream: MediaStream | undefined;
    captureStream: MediaStream | undefined;
    audioRecording: boolean;
    videoRecording: boolean;
    maxLength: number;
    recordedData: File | undefined;
    recordingFinished: boolean;
    isRecording: boolean;
    rememberDevice: boolean;
    previewActive: boolean;
    callbackFunction: Function | undefined;
    captureCallback: Function | undefined;
    uploadFileFunction: Function | undefined;
    selectDeviceFunction: Function | undefined;
    error: string | undefined;
    selectDeviceTitle: string | undefined;
    recordSecondsLeft: number;
    audioDevices: Array<MediaDeviceInfo> | undefined;
    videoDevices: Array<MediaDeviceInfo> | undefined;
    allDevices: Array<MediaDeviceInfo> | undefined;
    videoOptions: object | undefined;
    surfer: WaveSurfer | undefined;
    videoAspect: string;
    selectedCamera: string;
    hasFacingMode: boolean;
    isMobile: boolean;
    selectedAudioDeviceId: string | null;
    selectedVideoDeviceId: string | null;
    videoSettings: {
        width: number;
        height: number;
        deviceId?: string;
    } | undefined;
    static get styles(): any[];
    _closeMediaStream(): void;
    private _uploadFileThroughPhoneCamera;
    private _openRecorderDialog;
    render(): import("lit-html").TemplateResult<1>;
    _setVideoAspect(event: CustomEvent): void;
    _selectAudioDevice(event: CustomEvent): void;
    _selectVideoDevice(event: CustomEvent): void;
    _checkAudioDevices(): Promise<void>;
    _checkVideoDevices(): Promise<void>;
    _close(): void;
    _uploadFile(): void;
    _sendBack(): void;
    checkDevices(): void;
    connectedCallback(): void;
    captureUserMedia(callback: Function): void;
    _openMediaSession(callback: Function | undefined): void;
    open(options: {
        callbackFunction: Function | undefined;
        videoRecording: boolean;
        audioRecording: boolean;
        maxLength: number;
        uploadFileFunction: Function | undefined;
    }): Promise<void>;
    _generateRandomString(): string;
    _startRecording(): void;
    _stopRecording(): void;
    _deleteRecording(): void;
    _storeRecordedData(): void;
    _recordingTimer(): void;
    setupRecorders(): void;
}
//# sourceMappingURL=yp-media-recorder.d.ts.map