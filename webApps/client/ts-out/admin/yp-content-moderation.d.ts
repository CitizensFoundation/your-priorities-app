import { PropertyValueMap } from "lit";
import "@material/web/menu/menu.js";
import "@material/web/menu/menu-item.js";
import "@material/web/iconbutton/icon-button.js";
import "@material/web/checkbox/checkbox.js";
import "@material/web/progress/circular-progress.js";
import "@vaadin/vaadin-grid/vaadin-grid.js";
import { GridColumnElement } from "@vaadin/vaadin-grid/src/vaadin-grid-column";
import "@vaadin/grid/vaadin-grid.js";
import "@vaadin/grid/vaadin-grid-selection-column.js";
import "@vaadin/grid/vaadin-grid-filter-column.js";
import "@vaadin/grid/vaadin-grid-sort-column.js";
import { YpBaseElement } from "../common/yp-base-element.js";
import "../yp-magic-text/yp-magic-text.js";
import "../yp-point/yp-point.js";
import "../yp-post/yp-post.js";
interface RowData {
    item: YpModerationItem;
}
interface SelectedItemIdsAndType {
    id: number;
    modelType: string;
}
export declare class YpContentModeration extends YpBaseElement {
    multiSortEnabled: boolean;
    opened: boolean;
    showReload: boolean;
    forceSpinner: boolean;
    selectedItemsEmpty: boolean;
    items: Array<YpModerationItem> | undefined;
    selectedItems: Array<YpModerationItem> | undefined;
    headerText: string | undefined;
    groupId: number | undefined;
    communityId: number | undefined;
    domainId: number | undefined;
    userId: number | undefined;
    selected: YpDatabaseItem | undefined;
    modelType: string | undefined;
    selectedItemsCount: number;
    selectedItemIdsAndType: Array<SelectedItemIdsAndType> | undefined;
    selectedItemId: number | undefined;
    selectedModelClass: string | undefined | null;
    collectionName: string | undefined;
    itemsCountText: string | undefined;
    resizeTimeout: any | undefined;
    typeOfModeration: "moderate_all_content" | "flagged_content";
    activeItem: YpDatabaseItem | undefined;
    allowGridEventsAfterMenuOpen: boolean;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    static get styles(): any[];
    renderContent(root: HTMLElement, column: any, rowData: RowData): import("lit-html").RootPart;
    renderItemDetail(root: HTMLElement, column: any, rowData: RowData): import("lit-html").RootPart;
    renderActionHeader(root: HTMLElement, column?: GridColumnElement | undefined): import("lit-html").RootPart;
    renderAction(root: HTMLElement, column: any, rowData: RowData): import("lit-html").RootPart;
    render(): import("lit-html").TemplateResult<1>;
    get spinnerActive(): boolean;
    _ajaxError(error?: any | undefined): void;
    _reload(): Promise<void>;
    _masterRequest(action: string, itemIdsAndType?: Array<SelectedItemIdsAndType> | undefined): Promise<void>;
    _generateRequest(id: number): Promise<void>;
    _itemsResponse(items: Array<YpModerationItem>): void;
    get onlyFlaggedItems(): boolean;
    _manyItemsResponse(): void;
    _singleItemResponse(): void;
    _menuSelection(): void;
    _reallyAnonymize(): Promise<void>;
    _reallyAnonymizeSelected(): Promise<void>;
    _reallyDelete(): Promise<void>;
    _reallyDeleteSelected(): Promise<void>;
    _approve(event: CustomEvent): Promise<void>;
    _approveSelected(event: CustomEvent): Promise<void>;
    _block(event: CustomEvent): Promise<void>;
    _blockSelected(event: CustomEvent): Promise<void>;
    _clearFlags(event: CustomEvent): Promise<void>;
    _clearSelectedFlags(event: CustomEvent): Promise<void>;
    _refreshAfterChange(): Promise<void>;
    _domainIdChanged(): void;
    _groupIdChanged(): void;
    _communityIdChanged(): void;
    _userIdChanged(): void;
    _getType(type: string): string;
    _activeItemChanged(item: YpDatabaseItem | undefined, oldItem: YpDatabaseItem | undefined): void;
    _refreshGridAsync(): void;
    _refreshGridAsyncDelay(): void;
    _refreshGridAsyncBase(ms: number): void;
    connectedCallback(): void;
    protected firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    _toPercent(number: number | undefined): string | null;
    _resizeThrottler(): void;
    _setGridSize(): void;
    get totalItemsCount(): string | null;
    _selectedItemsChanged(): void;
    _setupItemIdFromEvent(event: CustomEvent): void;
    _deleteSelected(event: CustomEvent): void;
    _delete(event: CustomEvent): void;
    _anonymizeSelected(event: CustomEvent): void;
    _anonymize(event: CustomEvent): void;
    _menuOpened(): void;
    _setSelected(event: CustomEvent): void;
    _findItemFromId(id: number): undefined;
    setup(groupId: number | undefined, communityId: number | undefined, domainId: number | undefined, typeOfModeration: "flagged_content" | "moderate_all_content" | undefined, userId: number | undefined): void;
    open(name: string): void;
    _reset(): void;
    _resetSelectedAndClearCache(): void;
    _setupHeaderText(): void;
}
export {};
//# sourceMappingURL=yp-content-moderation.d.ts.map