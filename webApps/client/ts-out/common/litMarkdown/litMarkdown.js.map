{"version":3,"file":"litMarkdown.js","sourceRoot":"","sources":["../../../src/common/litMarkdown/litMarkdown.ts"],"names":[],"mappings":"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","sourcesContent":["import { directive } from 'lit/directive.js';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\nimport { AsyncDirective } from 'lit/async-directive.js';\nimport { marked } from 'marked';\nimport sanitizeHTML from 'sanitize-html';\nimport { YpBaseElement } from '../yp-base-element.js';\nmarked.setOptions({\n  // Enable table support\n  gfm: true,\n});\ntype Options = typeof MarkdownDirective.defaultOptions;\n\n//TODO: Add target = _blank to links\n\n/**\n * An async directive to render markdown in a LitElement's render function.\n * Images can be included or removed in the executor's options.\n */\nexport class MarkdownDirective extends AsyncDirective {\n  static defaultOptions = {\n    includeImages: false,\n    includeCodeBlockClassNames: false,\n    loadingHTML: '<p>Loading...</p>',\n    skipSanitization: false,\n    handleJsonBlocks: false,\n    targetElement: undefined as YpBaseElement | undefined\n  };\n\n  inJsonBlock = false;\n\n  hasCompletedJsonParsing = false;\n\n  handleJsonBlocks(rawMarkdown: string, targetElement: YpBaseElement) {\n    const startJsonBlockRegex = /```json/g;\n    let startIndex, endIndex;\n\n    if (!rawMarkdown)\n      return\n\n    startIndex = rawMarkdown.indexOf(\"```json\");\n\n    if (!this.inJsonBlock) {\n\n      if (startIndex !== -1) {\n        this.inJsonBlock = true;\n        targetElement.fire('jsonLoadingStart');\n        rawMarkdown = rawMarkdown.substring(startIndex);\n      }\n    } else if (this.inJsonBlock) {\n      endIndex = rawMarkdown.indexOf('```', startIndex + 6);\n      if (endIndex !== -1) {\n        let jsonContent = rawMarkdown.substring(startIndex+7, endIndex).trim();\n        if (!this.hasCompletedJsonParsing) {\n          targetElement.fire('jsonLoadingEnd', { jsonContent });\n        }\n        this.hasCompletedJsonParsing = true;\n        rawMarkdown = rawMarkdown.substring(0, startIndex);\n      } else {\n        // If the end of the JSON block is not found, process the entire chunk as JSON.\n        targetElement.fire('jsonPartialContent', { jsonContent: rawMarkdown.substring(6).trim() });\n        rawMarkdown = rawMarkdown.substring(0, startIndex);\n      }\n    }\n\n    return rawMarkdown;\n  }\n\n\n  private sanitizeHTMLWithOptions(rawHTML: string, options: Options): string {\n    return rawHTML;\n    /*   const allowedTags = options.includeImages\n      ? [...sanitizeHTML.defaults.allowedTags, \"img\"]\n      : sanitizeHTML.defaults.allowedTags;\n    const allowedClasses: sanitizeHTML.IOptions[\"allowedClasses\"] = options.includeCodeBlockClassNames\n      ? { code: [\"*\"] }\n      : {};\n    return sanitizeHTML(rawHTML, { allowedTags, allowedClasses });*/\n  }\n\n  private closeCodeBlockIfNeeded(rawMarkdown: string): string {\n    const codeBlockDelimiterCount = (rawMarkdown.match(new RegExp('```', 'g')) || []).length;\n\n    // If there is an odd number of code block delimiters, add one to close the last code block\n    if (codeBlockDelimiterCount % 2 !== 0) {\n      rawMarkdown += \"\\n```\";\n    }\n\n    return rawMarkdown;\n  }\n\n  private removeCitations(rawMarkdown: string): string {\n    const regex = /<code>(.*?)<\\/code>/g;\n\n    const output = rawMarkdown.replace(regex, (match, p1) => {\n      const innerRegex = /<span class=\"postCitation\">(\\d+)<\\/span>/g;\n      const cleanedContent = p1.replace(innerRegex, '');\n      return `<code>${cleanedContent}</code>`;\n    });\n\n    return output;\n  }\n\n  render(rawMarkdown: string, options?: Partial<Options>) {\n    const mergedOptions = Object.assign(\n      MarkdownDirective.defaultOptions,\n      options ?? {}\n    );\n\n    if (options && options.handleJsonBlocks && options.targetElement && rawMarkdown) {\n      rawMarkdown = this.handleJsonBlocks(rawMarkdown, options.targetElement)!;\n    }\n\n    if (rawMarkdown) {\n      rawMarkdown = this.closeCodeBlockIfNeeded(rawMarkdown);\n    }\n    //rawMarkdown = this.removeCitations(rawMarkdown);\n\n    if (!rawMarkdown) {\n      rawMarkdown = '';\n    }\n\n    new Promise<string>((resolve, reject) => {\n      //@ts-ignore\n      marked.parse(rawMarkdown, (error: any, result: any) => {\n        if (error) return reject(error);\n\n        const cssStyles = `\n          table {\n            border-collapse: collapse;\n            border-radius: 5px;\n            background-color: var(--md-sys-color-primary-container);\n            color: var(--md-sys-color-on-primary-container);\n            margin: 16px;\n            width: 100%;\n          }\n\n          img {\n            width: 200px;\n            height: 113px;\n            object-fit: cover;\n          }\n\n\n          ol {\n            margin: 8px;\n          }\n\n          @media (max-width: 800px) {\n            ol {\n              padding: 0px;\n            }\n          }\n\n          th, td {\n            padding: 8px;\n            text-align: left;\n            vertical-align: top;\n          }\n\n          th {\n            font-weight: bold;\n            background-color: var(--md-sys-color-primary-container);\n            color: var(--md-sys-color-on-primary-container);\n          }\n\n          tr:nth-child(even) {\n          }\n\n          tr:hover {\n          }\n\n          p {\n            margin-top: 8px;\n            margin-bottom: 8px;\n          }\n\n          pre {\n            white-space: pre-wrap;\n            white-space: -moz-pre-wrap;\n          }\n\n          a {\n            color: var(--md-sys-color-primary);\n            font-weight: bold;\n          }\n        `;\n\n        // Combine the CSS styles with the generated HTML\n        let formattedMarkdown = `\n            <style>\n            ${cssStyles}\n          </style>\n          ${result}\n        `;\n\n        resolve(formattedMarkdown);\n      });\n    })\n      .then(rawHTML => {\n        rawHTML = rawHTML.replace(/<a href=\"/g, '<a target=\"_blank\" href=\"');\n\n        if (mergedOptions.skipSanitization) {\n          return Promise.resolve(rawHTML);\n        }\n        return Promise.resolve(\n          this.sanitizeHTMLWithOptions(rawHTML, mergedOptions)\n        );\n      })\n      .then(preparedHTML => {\n        let renderedHTML = unsafeHTML(preparedHTML);\n\n        this.setValue(renderedHTML);\n      });\n\n    const placeholderHTML = mergedOptions.skipSanitization\n      ? mergedOptions.loadingHTML\n      : this.sanitizeHTMLWithOptions(mergedOptions.loadingHTML, mergedOptions);\n    return unsafeHTML(placeholderHTML);\n  }\n}\n\n/**\n * An asyn directive used to render markedown in a LitElement's render function.\n *\n * Rendering pictures can be enabled through the settings.\n * Css class names for code blocks may also be enabled through settings.\n *\n * setting the \"skipSanitization\" option to true will skip the sanitization process and render markdown as raw HTML.\n * _Use with caution!_\n *\n * The default loading html may also be replaced.\n * This default HTML is also sanitized by default.\n * If the \"skipSanitization\" option is true, the default HTML will also not be sanitized.\n *\n * @example render() {\n *            const rawMarkdown = `# Hello World`\n *            return html`<article>${resolveMarkdown(rawMarkdown)}</article>`\n * }\n *\n * @example render() {\n *            const rawMarkdown = `# Hello World\n *            ![image.jpeg](https://host.com/image.jpeg \"image.jpeg\")`;\n *            return html`<article>${resolveMarkdown(rawMarkdown, { includeImages: true, includeCodeBlockClassNames: true, loadingHTML: \"<loading-icon></loading-icon>\" })}</article>`\n * }\n * @typedef {Parameters<InstanceType<typeof MarkdownDirective>['render']>} RenderParameters\n * @param {RenderParameters[0]} rawMarkdown Markdown to be rendered.\n * @param {RenderParameters[1]} options\n */\nexport const resolveMarkdown = directive(MarkdownDirective);\n"]}