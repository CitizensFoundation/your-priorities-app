import { YpServerApiBase } from './YpServerApiBase.js';
export declare class YpServerApi extends YpServerApiBase {
    boot(): Promise<any>;
    isloggedin(): Promise<any>;
    getAdminRights(): Promise<any>;
    getMemberships(): Promise<any>;
    getAdminRightsWithNames(): Promise<any>;
    getMembershipsWithNames(): Promise<any>;
    logout(): Promise<any>;
    setLocale(body: Record<string, unknown>): Promise<any>;
    getRecommendationsForGroup(groupId: number): Promise<any>;
    hasVideoUploadSupport(): Promise<any>;
    hasAudioUploadSupport(): Promise<any>;
    sendVideoView(body: Record<string, unknown>): Promise<any>;
    sendAudioView(body: Record<string, unknown>): Promise<any>;
    createActivityFromApp(body: Record<string, unknown>): Promise<any>;
    marketingTrackingOpen(groupId: number, body: Record<string, unknown>): Promise<any>;
    createApiKey(): Promise<any>;
    triggerTrackingGoal(groupId: number, body: Record<string, unknown>): Promise<any>;
    startGeneratingAiImage(collectionType: string, collectionId: number, imageType: string, prompt: string): Promise<any>;
    getPromoterRights(): Promise<any>;
    pollForGeneratingAiImage(collectionType: string, collectionId: number, jobId: number): Promise<any>;
    getCollection(collectionType: string, collectionId: number): Promise<any>;
    getCategoriesCount(id: number, tabName: string | undefined): Promise<any>;
    getGroupPosts(searchUrl: string): Promise<any>;
    getPost(postId: number): Promise<any>;
    getGroup(groupId: number): Promise<any>;
    endorsePost(postId: number, method: string, body: Record<string, unknown>): Promise<any>;
    getHasNonOpenPosts(groupId: number): Promise<any>;
    getHelpPages(collectionType: string, collectionId: number): Promise<any>;
    getTranslation(translateUrl: string): Promise<any>;
    getTranslatedRegistrationQuestions(groupId: number, targetLanguage: string): Array<string>;
    sendRegistrationQuestions(registrationAnswers: Array<Record<string, string>>): Promise<any>;
    savePostTranscript(postId: number, body: Record<string, unknown>): Promise<any>;
    getPostTranscriptStatus(groupId: number, tabName: string | undefined): Promise<any>;
    addPoint(groupId: number, body: Record<string, unknown>): Promise<any>;
    completeMediaPoint(mediaType: string, pointId: number, body: Record<string, unknown>): Promise<any>;
    completeMediaPost(mediaType: string, method: string, postId: number, body: Record<string, unknown>): Promise<any>;
    getPoints(postId: number): Promise<any>;
    getMorePoints(postId: number, offsetUp: number, offsetDown: number): Promise<any>;
    getNewPoints(postId: number, latestPointCreatedAt: Date): Promise<any>;
    getSurveyTranslations(post: YpPostData, language: string): Promise<any>;
    getSurveyQuestionsTranslations(group: YpGroupData, language: string): Promise<any>;
    getVideoFormatsAndImages(videoId: number): Promise<any>;
    getGroupConfiguration(groupId: number): Promise<any>;
    setVideoCover(videoId: number, body: Record<string, unknown>): Promise<any>;
    getTranscodingJobStatus(mediaType: string, mediaId: number, jobId: string): Promise<any>;
    startTranscoding(mediaType: string, mediaId: number, startType: string, body: Record<string, unknown>): Promise<any>;
    createPresignUrl(mediaUrl: string, body?: {}): Promise<any>;
    updatePoint(pointId: number, body: Record<string, unknown>): Promise<any>;
    updatePointAdminComment(groupId: number, pointId: number, body: Record<string, unknown>): Promise<any>;
    deletePoint(pointId: number): Promise<any>;
    checkPointTranscriptStatus(type: string, pointId: number): Promise<any>;
    registerUser(body: Record<string, unknown>): Promise<any>;
    registerAnonymously(body: Record<string, unknown>): Promise<any>;
    loginUser(body: Record<string, unknown>): Promise<any>;
    getAoiTotalStats(domainId: number): Promise<AoiSiteStats>;
    submitForm(url: string, method: string, headers: Record<string, string>, body: string): Promise<any>;
    getSurveyGroup(surveyGroupId: number): Promise<any>;
    postSurvey(surveyGroupId: number, body: Record<string, unknown>): Promise<any>;
    deleteActivity(type: string, collectionId: number, activityId: number): Promise<any>;
    getAcActivities(url: string): Promise<any>;
    getRecommendations(typeName: string, typeId: number): Promise<any>;
    setNotificationsAsViewed(body: Record<string, unknown>): Promise<any>;
    setNotificationsAllAsViewed(): Promise<any>;
    getAcNotifications(url: string): Promise<any>;
    getComments(type: string, pointId: number): Promise<any>;
    getCommentsCount(type: string, pointId: number): Promise<any>;
    postComment(type: string, id: number, body: Record<string, unknown>): Promise<any>;
    setPointQuality(pointId: number, method: string, body: Record<string, unknown>): Promise<any>;
    postNewsStory(url: string, body: Record<string, unknown>): Promise<any>;
    pointUrlPreview(urlParams: string): Promise<any>;
    disconnectSamlLogin(): Promise<any>;
    disconnectFacebookLogin(): Promise<any>;
    deleteUser(): Promise<any>;
    anonymizeUser(): Promise<any>;
    resetPassword(token: string, body: Record<string, unknown>): Promise<any>;
    setEmail(body: Record<string, unknown>): Promise<any>;
    linkAccounts(body: Record<string, unknown>): Promise<any>;
    confirmEmailShown(): Promise<any>;
    forgotPassword(body: Record<string, unknown>): Promise<any>;
    acceptInvite(token: string): Promise<any>;
    getInviteSender(token: string): Promise<any>;
    getPostLocations(type: string, id: number): Promise<any>;
    hasAutoTranslation(): Promise<any>;
    apiAction(url: string, method: string, body: Record<string, unknown>): Promise<any>;
    getImages(postId: number): Promise<any>;
    postRating(postId: number, ratingIndex: number, body: Record<string, unknown>): Promise<any>;
    deleteRating(postId: number, ratingIndex: number): Promise<any>;
}
//# sourceMappingURL=YpServerApi.d.ts.map