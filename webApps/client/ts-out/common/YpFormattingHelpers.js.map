{"version":3,"file":"YpFormattingHelpers.js","sourceRoot":"","sources":["../../src/common/YpFormattingHelpers.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,mBAAmB;IAC9B,MAAM,CAAC,MAAM,CAAC,KAAyB,EAAE,cAAc,GAAG,GAAG;QAC3D,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,uBAAuB,EAAE,cAAc,CAAC,CAAC;QACtF,CAAC;aAAM,CAAC;YACN,OAAO,GAAG,CAAC;QACb,CAAC;IACH,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,OAAuC,EAAE,aAAqB;QAC/E,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,OAAO,EAAE,CAAC;YACZ,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7C,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACvC,IAAG,OAAO,CAAC,CAAC,CAAC,KAAK,aAAa,EAAE,CAAC;oBAChC,YAAY,IAAI,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;gBACnC,CAAC;YACH,CAAC;YACD,OAAO,CAAC,SAAS,GAAG,YAAY,CAAC;QACnC,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,KAAa,EAAE,MAAc,EAAE,YAA8B,SAAS,EAAE,MAAwB,SAAS;QACvH,MAAM,GAAG,MAAM,IAAI,GAAG,CAAC;QAEvB,IAAI,KAAK,CAAC,MAAM,IAAI,MAAM;YACxB,OAAO,KAAK,CAAC;QAEf,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACrC,CAAC;aAAM,CAAC;YACN,IAAI,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACzC,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC;gBACf,GAAG,GAAG,MAAM,CAAC;YACf,CAAC;YAED,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;QAC3D,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,KAAa;QACvB,OAAO,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC;CACF","sourcesContent":["export class YpFormattingHelpers {\n  static number(value: number | undefined, digitSeperator = \",\"): string {\n    if (value) {\n      return value.toFixed(0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, digitSeperator);\n    } else {\n      return \"0\";\n    }\n  }\n\n  static removeClass(element: HTMLElement | undefined | null, classToRemove: string) {\n    let newClassName = \"\";\n    if (element) {\n      const classes = element.className.split(\" \");\n      for(let i = 0; i < classes.length; i++) {\n        if(classes[i] !== classToRemove) {\n          newClassName += classes[i] + \" \";\n        }\n      }\n      element.className = newClassName;\n    } else {\n      console.error(\"Trying to remove class from a non exisisting element\");\n    }\n  }\n\n  static truncate(input: string, length: number, killwords: string|undefined = undefined, end: string|undefined = undefined) {\n    length = length || 255;\n\n    if (input.length <= length)\n      return input;\n\n    if (killwords) {\n      input = input.substring(0, length);\n    } else {\n      let idx = input.lastIndexOf(' ', length);\n      if (idx === -1) {\n        idx = length;\n      }\n\n      input = input.substring(0, idx);\n    }\n\n    input += (end !== undefined && end !== null) ? end : '...';\n    return input;\n  }\n\n  static trim(input: string) {\n    return input.replace(/^\\s*|\\s*$/g, '');\n  }\n}\n"]}