import "./yp-registration-questions.js";
import "./yp-forgot-password.js";
import { YpBaseElement } from "../common/yp-base-element.js";
import "@material/web/iconbutton/icon-button.js";
import "@material/web/textfield/filled-text-field.js";
import "@material/web/radio/radio.js";
import "@material/web/icon/icon.js";
import "@material/web/button/filled-tonal-button.js";
import "@material/web/button/filled-button.js";
import "@material/web/button/text-button.js";
import "@material/web/button/outlined-button.js";
import "@material/web/dialog/dialog.js";
import "@material/web/progress/circular-progress.js";
export declare class YpLogin extends YpBaseElement {
    userSpinner: boolean;
    domain: YpDomainData | undefined;
    reCaptchaSiteKey: string;
    emailErrorMessage: string | undefined;
    passwordErrorMessage: string | undefined;
    name: string;
    email: string;
    password: string;
    submitText: string;
    redirectToURL: string | undefined;
    forgotPasswordOpen: boolean;
    heading: string | undefined;
    customUserRegistrationText: string | undefined;
    opened: boolean;
    target: any | undefined;
    forceSecureSamlLogin: boolean;
    hasAnonymousLogin: boolean;
    disableFacebookLoginForGroup: boolean;
    credentials: Record<string, unknown> | undefined;
    pollingStartedAt: Date | undefined;
    signupTermsId: number | undefined;
    samlLoginButtonUrl: string | undefined;
    customSamlLoginText: string | undefined;
    oneTimeLoginName: string | undefined;
    hasOneTimeLoginWithName: boolean;
    registrationQuestionsGroup: YpGroupData | undefined;
    onLoginFunction: Function | undefined;
    isSending: boolean;
    reloadPageOnDialogClose: boolean;
    _logingDialogClose(): void;
    static get styles(): any[];
    renderSamlLogin(): import("lit-html").TemplateResult<1>;
    renderAdditionalMethods(): import("lit-html").TemplateResult<1>;
    renderLogin(): import("lit-html").TemplateResult<1>;
    renderCreateUser(): import("lit-html").TemplateResult<1>;
    renderButtons(): import("lit-html").TemplateResult<1>;
    closeAndReset(): void;
    renderOneTimeDialog(): import("lit-html").TemplateResult<1>;
    openCreateUser(): void;
    cancelRegistration(): void;
    _setupJsonCredentials(registerMode: boolean): void;
    _updateOneTimeLoginName(event: KeyboardEvent): void;
    renderForgotPassword(): import("lit-html").TemplateResult<1>;
    render(): import("lit-html").TemplateResult<1>;
    _registrationQuestionsChanged(): void;
    _setupCustomRegistrationQuestions(): void;
    _keySaml(event: KeyboardEvent): void;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    get customTermsIntroText(): string;
    get userNameText(): string;
    get showSignupTerms(): number | undefined;
    _isiOsInApp(): boolean;
    _openTerms(): void;
    _facebookLogin(): void;
    oneTimeLogin(): void;
    finishOneTimeLoginWithName(): void;
    anonymousLogin(loginSubType?: string, registrationAnswers?: Record<string, string>[] | undefined): Promise<boolean>;
    _isInApp(): boolean;
    _openSamlLogin(): void;
    firstUpdated(): void;
    _startSpinner(): void;
    _cancel(): void;
    _domainEvent(event: CustomEvent): void;
    get hasAdditionalAuthMethods(): boolean | undefined;
    get hasFacebookLogin(): boolean | undefined;
    get hasSamlLogin(): boolean | undefined;
    _openedChanged(): void;
    onEnterLogin(event: KeyboardEvent): void;
    onEnterRegistration(event: KeyboardEvent): void;
    onEnterOneTimeLogin(event: KeyboardEvent): void;
    _networkError(event: CustomEvent): void;
    _forgotPassword(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    setup(onLoginFunction: Function, domain: YpDomainData): void;
    _setTexts(): void;
    emailValue(registerMode?: boolean | undefined): string;
    passwordValue(registerMode?: boolean | undefined): string;
    get fullnameValue(): string | void;
    _registerUser(): Promise<void>;
    _loginUser(): Promise<void>;
    _validateAndSend(registerMode: boolean): boolean;
    _loginAfterSavePassword(user: YpUserData): void;
    _loginCompleted(user: YpUserData): void;
    openDialog(redirectToURL: string | undefined, email: string | undefined, collectionConfiguration: YpCollectionConfiguration | undefined): Promise<void>;
    close(): void;
}
//# sourceMappingURL=yp-login.d.ts.map