{"version":3,"file":"agent-chat-assistant.js","sourceRoot":"","sources":["../../../src/policySynth/chat/agent-chat-assistant.ts"],"names":[],"mappings":"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","sourcesContent":["import { PropertyValueMap, css, html } from 'lit';\nimport { property, customElement, query, queryAll } from 'lit/decorators.js';\n\nimport '@material/web/fab/fab.js';\n\nimport '@material/web/radio/radio.js';\nimport '@material/web/button/elevated-button.js';\nimport '@material/web/button/text-button.js';\nimport '@material/web/button/outlined-button.js';\nimport '@material/web/button/filled-button.js';\nimport '@material/web/textfield/outlined-text-field.js';\nimport '@material/web/icon/icon.js';\n\nimport '@material/web/iconbutton/outlined-icon-button.js';\n\nimport '@yrpri/webapp/common/yp-image.js';\nimport { LtpAiChatElement } from './agent-ai-chat-element.js';\nimport { MdFilledTonalButton } from '@material/web/button/filled-tonal-button.js';\nimport { MdOutlinedTextField } from '@material/web/textfield/outlined-text-field.js';\n\nimport './agent-ai-chat-element.js';\nimport { PsServerApi } from '../PsServerApi.js';\nimport { PsChatAssistant } from '../../chatBot/ps-chat-assistant.js';\n\nconst PROMPT_DEBUG = true;\n\n@customElement('ltp-chat-assistant')\nexport class LtpChatAssistant extends PsChatAssistant {\n  @property({ type: Object })\n  crtData!: LtpCurrentRealityTreeData;\n\n  @property({ type: Object })\n  nodeToAddCauseTo!: LtpCurrentRealityTreeDataNode;\n\n  @property({ type: String })\n  defaultInfoMessage: string =\n    \"I'm your Current Reality Tree assistant. I'm here to help to identify direct causes of: \";\n\n  @property({ type: Boolean })\n  lastChainCompletedAsValid = false;\n\n  @queryAll('ltp-ai-chat-element')\n  chatElements?: LtpAiChatElement[];\n\n  @property({ type: Array })\n  lastCausesToValidate: string[] | undefined;\n\n  @property({ type: Array })\n  lastValidatedCauses: string[] | undefined;\n\n  api: PsServerApi;\n  heartbeatInterval: number | undefined;\n\n  defaultDevWsPort = 8000;\n\n  constructor() {\n    super();\n    this.api = new PsServerApi();\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    this.defaultInfoMessage += `**${this.nodeToAddCauseTo.description}**`;\n  }\n\n  async addChatBotElement(data: PsAiChatWsMessage) {\n    const lastElement = this.chatElements![this.chatElements!.length - 1];\n\n    switch (data.type) {\n      case 'hello_message':\n        this.addToChatLogWithMessage(data);\n        break;\n      case 'thinking':\n        if (lastElement) {\n          lastElement.spinnerActive = false;\n        }\n        this.addToChatLogWithMessage(data, this.t('Thinking...'));\n        break;\n      case 'noStreaming':\n        if (lastElement) {\n          lastElement.spinnerActive = true;\n        }\n        this.addToChatLogWithMessage(data, data.message);\n        break;\n      case 'agentStart':\n        if (lastElement) {\n          lastElement.spinnerActive = false;\n        }\n        const startOptions = data.message as unknown as PsAgentStartWsOptions;\n\n        setTimeout(() => {\n          this.scrollDown();\n        }, 50);\n\n        if (startOptions.noStreaming) {\n          this.addChatBotElement({\n            sender: 'bot',\n            type: 'noStreaming',\n            message: startOptions.name,\n          });\n        } else {\n          this.addToChatLogWithMessage(data, startOptions.name);\n          this.chatLog[\n            this.chatLog.length - 1\n          ].message = `${startOptions.name}\\n\\n`;\n        }\n        this.requestUpdate();\n        break;\n      case 'agentCompleted':\n        if (lastElement) {\n          lastElement.spinnerActive = false;\n        }\n        this.lastChainCompletedAsValid = false;\n        this.lastValidatedCauses = undefined;\n\n        const completedOptions =\n          data.message as unknown as PsAgentCompletedWsOptions;\n        if (\n          completedOptions.results.lastAgent ||\n          (completedOptions.results.validationErrors &&\n            completedOptions.results.validationErrors.length > 0)\n        ) {\n          this.getSuggestionsFromValidation(\n            completedOptions.name,\n            completedOptions.results\n          );\n        }\n        if (\n          completedOptions.results.isValid &&\n          completedOptions.results.lastAgent\n        ) {\n          this.lastChainCompletedAsValid = true;\n          this.lastValidatedCauses = this.lastCausesToValidate;\n        }\n        break;\n      case 'start':\n        if (lastElement) {\n          lastElement.spinnerActive = false;\n        }\n        this.addToChatLogWithMessage(data, this.t('Thinking...'));\n        if (!this.chatLog[this.chatLog.length - 1].message)\n          this.chatLog[this.chatLog.length - 1].message = '';\n        break;\n      case 'start_followup':\n        lastElement.followUpQuestionsRaw = '';\n        break;\n      case 'stream_followup':\n        lastElement.followUpQuestionsRaw += data.message;\n        this.requestUpdate();\n        break;\n      case 'info':\n        this.infoMessage = data.message;\n        break;\n      case 'moderation_error':\n        data.message =\n          'OpenAI Moderation Flag Error. Please refine your question.';\n        this.addToChatLogWithMessage(data, data.message, false, this.t('Send'));\n        break;\n      case 'error':\n        this.addToChatLogWithMessage(data, data.message, false, this.t('Send'));\n        break;\n      case 'end':\n        lastElement.stopJsonLoading();\n        this.chatLog[this.chatLog.length - 1].debug = data.debug;\n        this.sendButton!.disabled = false;\n        this.sendButton!.innerHTML = this.t('Send');\n        this.infoMessage = this.defaultInfoMessage;\n        break;\n      case 'message':\n        if (lastElement) {\n          lastElement.spinnerActive = false;\n        }\n        this.addToChatLogWithMessage(\n          data,\n          data.message,\n          undefined,\n          undefined,\n          data.refinedCausesSuggestions\n        );\n        this.chatLog[this.chatLog.length - 1].refinedCausesSuggestions =\n          data.refinedCausesSuggestions;\n        this.sendButton!.disabled = false;\n        this.sendButton!.innerHTML = this.t('Send');\n        this.infoMessage = this.defaultInfoMessage;\n        this.requestUpdate();\n        break;\n      case 'stream':\n        if (data.message && data.message != 'undefined') {\n          //@ts-ignore\n          this.infoMessage = this.t('typing');\n          this.chatLog[this.chatLog.length - 1].message =\n            this.chatLog[this.chatLog.length - 1].message + data.message;\n          //console.error(this.chatLog[this.chatLog.length - 1].message)\n          this.requestUpdate();\n          break;\n        }\n    }\n\n    this.scrollDown();\n  }\n\n  async sendChatMessage() {\n    const message = this.chatInputField!.value;\n\n    if (message.length === 0) return;\n\n    //this.ws.send(message);\n    this.chatInputField!.value = '';\n    this.sendButton!.disabled = false;\n    //this.sendButton!.innerHTML = this.t('Thinking...');\n    setTimeout(() => {\n      this.chatInputField!.blur();\n    });\n\n    const effect = this.nodeToAddCauseTo.description;\n\n    let causes = message\n      .split('\\n')\n      .map(cause => cause.trim())\n      .filter(cause => cause !== '');\n\n    let firstUserMessage = `Effect: ${effect}\\n`;\n    causes.forEach((cause, index) => {\n      firstUserMessage += `Cause ${index + 1}: ${cause}\\n`;\n    });\n\n    this.addChatBotElement({\n      sender: 'you',\n      type: 'start',\n      message: this.chatLog.length === 0 ? firstUserMessage : message,\n    });\n\n    if (this.chatLog.length === 1) {\n      this.lastCausesToValidate = causes;\n      await this.api.runValidationChain(\n        this.crtData.id!,\n        this.nodeToAddCauseTo.id,\n        this.chatLog,\n        this.wsClientId,\n        effect,\n        causes\n      );\n    } else {\n      this.addChatBotElement({\n        sender: 'bot',\n        type: 'thinking',\n        message: '',\n      });\n\n      this.lastChainCompletedAsValid = false;\n\n      await this.api.sendGetRefinedCauseQuery(\n        this.crtData.id!,\n        this.nodeToAddCauseTo.id,\n        this.chatLog,\n        this.wsClientId\n      );\n    }\n  }\n\n  async validateSelectedChoices(event: CustomEvent) {\n    const causes = event.detail;\n    this.lastCausesToValidate = causes;\n\n    await this.api.runValidationChain(\n      this.crtData.id!,\n      this.nodeToAddCauseTo.id,\n      this.chatLog,\n      this.wsClientId,\n      this.nodeToAddCauseTo.description,\n      causes\n    );\n  }\n\n  async getSuggestionsFromValidation(\n    agentName: string,\n    validationResults: PsValidationAgentResult\n  ) {\n    let effect;\n    effect = this.nodeToAddCauseTo.description;\n\n    let userMessage = `Expert: ${agentName}\n\nEffect: ${this.nodeToAddCauseTo?.description}\\n`;\n    this.lastCausesToValidate!.forEach((cause, index) => {\n      userMessage += `Cause ${index + 1}: ${cause}\\n`;\n    });\n\n    userMessage += `Expert Validation Results:\\n`;\n\n    userMessage += JSON.stringify(validationResults, null, 2);\n\n    this.addChatBotElement({\n      sender: 'you',\n      type: 'start',\n      message: userMessage,\n    });\n\n    this.chatLog[this.chatLog.length - 1].hidden = true;\n\n    this.addChatBotElement({\n      sender: 'bot',\n      type: 'thinking',\n      message: '',\n    });\n\n    await this.api.sendGetRefinedCauseQuery(\n      this.crtData.id!,\n      this.nodeToAddCauseTo.id,\n      this.chatLog,\n      this.wsClientId\n    );\n  }\n\n  renderChatInput() {\n    return html`\n      ${this.onlyUseTextField || this.chatLog.length > 1\n        ? html`\n            <md-outlined-text-field\n              class=\"textInput\"\n              type=\"text\"\n              hasTrailingIcon\n              id=\"chatInput\"\n              rows=\"${this.chatLog.length > 1 ? '1' : '3'}\"\n              @focus=\"${() => (this.inputIsFocused = true)}\"\n              @blur=\"${() => (this.inputIsFocused = true)}\"\n              @keyup=\"${(e: KeyboardEvent) => {\n                if (e.key === 'Enter') {\n                  this.sendChatMessage();\n                }\n              }}\"\n              .label=\"${this.textInputLabel}\"\n              ><md-icon\n                class=\"sendIcon\"\n                @click=\"${this.sendChatMessage}\"\n                slot=\"trailing-icon\"\n                id=\"sendButton\"\n                ?input-is-focused=\"${this.inputIsFocused}\"\n                >send</md-icon\n              >\n            </md-outlined-text-field>\n          `\n        : html`<md-outlined-text-field\n            class=\"textInput\"\n            type=\"textarea\"\n            hasTrailingIcon\n            id=\"chatInput\"\n            rows=\"${this.chatLog.length > 1 ? '1' : '3'}\"\n            @focus=\"${() => (this.inputIsFocused = true)}\"\n            @blur=\"${() => (this.inputIsFocused = true)}\"\n            .label=\"${this.textInputLabel}\"\n            ><md-icon\n              class=\"sendIcon\"\n              @click=\"${this.sendChatMessage}\"\n              slot=\"trailing-icon\"\n              id=\"sendButton\"\n              ?input-is-focused=\"${this.inputIsFocused}\"\n              >send</md-icon\n            ></md-outlined-text-field\n          >`}\n    `;\n  }\n\n  override render() {\n    return html`\n      <div class=\"chat-window\" id=\"chat-window\">\n        <div class=\"chat-messages\" id=\"chat-messages\">\n          <ltp-ai-chat-element\n            class=\"chatElement bot-chat-element\"\n            .detectedLanguage=\"${this.language}\"\n            .message=\"${this.defaultInfoMessage}\"\n            type=\"info\"\n            sender=\"bot\"\n          ></ltp-ai-chat-element>\n          ${this.chatLog\n            .filter(chatElement => !chatElement.hidden)\n            .map(\n              chatElement => html`\n                <ltp-ai-chat-element\n                  ?thinking=\"${chatElement.type === 'thinking' ||\n                  chatElement.type === 'noStreaming'}\"\n                  @followup-question=\"${this.followUpQuestion}\"\n                  @validate-selected-causes=\"${this.validateSelectedChoices}\"\n                  .clusterId=\"${this.clusterId}\"\n                  class=\"chatElement ${chatElement.sender}-chat-element\"\n                  .detectedLanguage=\"${this.language}\"\n                  .message=\"${chatElement.message}\"\n                  @scroll-down-enabled=\"${() => (this.userScrolled = false)}\"\n                  .lastChainCompletedAsValid=\"${this.lastChainCompletedAsValid}\"\n                  .lastValidatedCauses=\"${this.lastValidatedCauses}\"\n                  .crtId=\"${this.crtData.id}\"\n                  .parentNodeId=\"${this.nodeToAddCauseTo.id}\"\n                  .type=\"${chatElement.type}\"\n                  .sender=\"${chatElement.sender}\"\n                ></ltp-ai-chat-element>\n              `\n            )}\n        </div>\n        <div class=\"layout horizontal center-center chat-input\">\n          ${this.renderChatInput()}\n        </div>\n      </div>\n    `;\n  }\n}\n"]}