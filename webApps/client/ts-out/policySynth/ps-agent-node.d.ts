import { nothing } from "lit";
import "@material/web/iconbutton/icon-button.js";
import "@material/web/progress/circular-progress.js";
import "@material/web/progress/linear-progress.js";
import "@material/web/menu/menu.js";
import "@material/web/menu/menu-item.js";
import "@material/web/menu/sub-menu.js";
import "@material/web/divider/divider.js";
import "@trystan2k/fleshy-jsoneditor/fleshy-jsoneditor.js";
import { PsServerApi } from "./PsServerApi.js";
import { PsOperationsBaseNode } from "./ps-operations-base-node.js";
import { MdMenu } from "@material/web/menu/menu.js";
import { MdDialog } from "@material/web/dialog/dialog.js";
export declare class PsAgentNode extends PsOperationsBaseNode {
    agent: PsAgentAttributes;
    agentId: number;
    groupId: number;
    running: boolean;
    private agentState;
    private latestMessage;
    private progress;
    private menuOpen;
    private agentMemory;
    connectorMenuAnchor: HTMLElement;
    agentConnectorMenu: MdMenu;
    mainMenuAnchor: HTMLElement;
    agentMainMenu: MdMenu;
    memoryDialog: MdDialog;
    api: PsServerApi;
    private statusInterval;
    constructor();
    firstUpdated(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    toggleConnectorMenu(e: Event): void;
    toggleMainMenu(e: Event): void;
    fetchAgentMemory(): Promise<void>;
    openMemoryDialog(): void;
    addInputConnector(): void;
    addOutputConnector(): void;
    addExistingConnector(connectorId: number, type: "input" | "output"): void;
    startStatusUpdates(): void;
    stopStatusUpdates(): void;
    updateAgentStatus(): Promise<void>;
    startAgent(): Promise<void>;
    pauseAgent(): Promise<void>;
    stopAgent(): Promise<void>;
    editNode(): void;
    renderMemoryDialog(): import("lit-html").TemplateResult<1>;
    renderActionButtons(): import("lit-html").TemplateResult<1>;
    renderProgress(): import("lit-html").TemplateResult<1>;
    renderConnectorMenu(): import("lit-html").TemplateResult<1> | typeof nothing;
    renderMainMenu(): import("lit-html").TemplateResult<1>;
    render(): import("lit-html").TemplateResult<1> | typeof nothing;
    static get styles(): (any[] | import("lit").CSSResult)[];
}
//# sourceMappingURL=ps-agent-node.d.ts.map