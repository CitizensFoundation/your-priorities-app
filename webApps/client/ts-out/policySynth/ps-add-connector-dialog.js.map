{"version":3,"file":"ps-add-connector-dialog.js","sourceRoot":"","sources":["../../src/policySynth/ps-add-connector-dialog.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\nimport '@material/web/dialog/dialog.js';\nimport '@material/web/button/text-button.js';\nimport '@material/web/button/filled-button.js';\nimport '@material/web/select/filled-select.js';\nimport '@material/web/select/select-option.js';\nimport '@material/web/textfield/filled-text-field.js';\n\nimport { PsServerApi } from './PsServerApi.js';\nimport { YpBaseElement } from '../common/yp-base-element.js';\n\n@customElement('ps-add-connector-dialog')\nexport class PsAddConnectorDialog extends YpBaseElement {\n  @property({ type: Boolean }) open = false;\n  @property({ type: Number }) selectedAgentId: number | null = null;\n  @property({ type: Number }) groupId!: number;\n\n  @property({ type: String })\n  selectedInputOutputType: \"input\" | \"output\" | null = null;\n\n  @state() private activeConnectorClasses: PsAgentConnectorClassAttributes[] =\n    [];\n  @state() private selectedConnectorClassId: number | null = null;\n  @state() private connectorName: string = '';\n\n  private api = new PsServerApi();\n\n  override async connectedCallback() {\n    super.connectedCallback();\n    await this.fetchActiveConnectorClasses();\n  }\n\n  async fetchActiveConnectorClasses() {\n    try {\n      this.activeConnectorClasses = await this.api.getActiveConnectorClasses(this.groupId);\n    } catch (error) {\n      console.error('Error fetching active connector classes:', error);\n    }\n  }\n\n  disableScrim(event: CustomEvent) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  override render() {\n    return html`\n      <md-dialog ?open=\"${this.open}\" @closed=\"${this._handleClose}\" @cancel=\"${this.disableScrim}\">\n        <div slot=\"headline\">${this.selectedInputOutputType==\"input\" ? \"Add Input Connector\" : \"Add Output Connector\"}</div>\n        <div slot=\"content\">\n          <md-filled-text-field\n            label=\"Connector Name\"\n            @input=\"${this._handleNameInput}\"\n            value=\"${this.connectorName}\"\n          ></md-filled-text-field>\n          <md-filled-select\n            label=\"Select Connector Class\"\n            @change=\"${this._handleConnectorClassSelection}\"\n          >\n            ${this.activeConnectorClasses?.map(\n              connectorClass => html`\n                <md-select-option value=\"${connectorClass.id}\">\n                  <div slot=\"headline\">${connectorClass.name}</div>\n                </md-select-option>\n              `\n            )}\n          </md-filled-select>\n        </div>\n        <div slot=\"actions\">\n          <md-text-button @click=\"${this._handleClose}\">Cancel</md-text-button>\n          <md-filled-button @click=\"${this._handleAddConnector}\"\n            >Add Connector</md-filled-button\n          >\n        </div>\n      </md-dialog>\n    `;\n  }\n\n  private _handleNameInput(e: Event) {\n    const input = e.target as HTMLInputElement;\n    this.connectorName = input.value;\n  }\n\n  private _handleConnectorClassSelection(e: Event) {\n    const select = e.target as HTMLSelectElement;\n    this.selectedConnectorClassId = Number(select.value);\n  }\n\n  private _handleClose() {\n    this.dispatchEvent(new CustomEvent('close'));\n  }\n\n  private async _handleAddConnector() {\n    if (\n      !this.connectorName ||\n      !this.selectedAgentId ||\n      !this.selectedConnectorClassId\n    ) {\n      console.error('Connector name, agent, or connector class not selected');\n      return;\n    }\n\n    try {\n      const newConnector = await this.api.createConnector(\n        this.groupId,\n        this.selectedAgentId,\n        this.selectedConnectorClassId,\n        this.connectorName,\n        this.selectedInputOutputType as \"input\" | \"output\"\n      );\n      this.dispatchEvent(\n        new CustomEvent('connector-added', {\n          detail: { connector: newConnector },\n        })\n      );\n      this._handleClose();\n    } catch (error) {\n      console.error('Error creating new connector:', error);\n    }\n  }\n\n\n  static override get styles() {\n    return [\n      super.styles,\n      css`\n    md-filled-text-field,\n    md-filled-select {\n      width: 100%;\n      margin-bottom: 16px;\n      margin-top: 16px;\n    }\n  `];\n  }\n}\n"]}