{"version":3,"file":"PsStreamingAIResponse.js","sourceRoot":"","sources":["../../src/policySynth/PsStreamingAIResponse.ts"],"names":[],"mappings":"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","sourcesContent":["import { PropertyValueMap, css, html, nothing } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\n\nimport '@material/web/iconbutton/icon-button.js';\nimport '@material/web/progress/circular-progress.js';\nimport '@material/web/menu/menu.js';\nimport '@material/web/menu/menu-item.js';\n\nimport { PsServerApi } from './PsServerApi.js';\nimport { PsOperationsView } from './ps-operations-view.js';\nimport { MdMenu } from '@material/web/menu/menu.js';\nimport { YpCodeBase } from '../common/YpCodeBaseclass.js';\nimport { YpBaseElement } from '../common/yp-base-element.js';\n\nexport class PsStreamingAIResponse extends YpCodeBase {\n  wsClientId!: string;\n\n  targetContainer: HTMLElement | HTMLInputElement | undefined;\n\n  caller: YpBaseElement;\n\n  api: PsServerApi;\n\n  ws!: WebSocket;\n\n  isActive = false;\n\n  constructor(\n    caller: YpBaseElement,\n    targetContainer: HTMLElement | HTMLInputElement | undefined = undefined\n  ) {\n    super();\n    this.caller = caller;\n    this.api = new PsServerApi();\n    this.targetContainer = targetContainer;\n  }\n\n  close() {\n    this.ws.close();\n    this.isActive = false;\n  }\n\n  async connect(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      let wsEndpoint;\n      this.isActive = true;\n\n      if (\n        window.location.hostname === 'localhost' ||\n        window.location.hostname === '192.1.168'\n      ) {\n        wsEndpoint = `ws://${window.location.hostname}:8000`;\n      } else {\n        wsEndpoint = `wss://${window.location.hostname}:443`;\n      }\n\n      this.ws = new WebSocket(wsEndpoint);\n\n      this.ws.onmessage = this.onMessage.bind(this);\n      this.ws.onopen = event => {\n        this.onWsOpen(event, resolve);\n      };\n      this.ws.onerror = reject; // Handle connection errors\n    });\n  }\n\n  onWsOpen(event: Event, resolve: (wsClientId: string) => void) {\n    // Assuming the server sends the clientId immediately after connection\n    this.ws.onmessage = messageEvent => {\n      const data = JSON.parse(messageEvent.data);\n      if (data.clientId) {\n        this.wsClientId = data.clientId;\n        resolve(this.wsClientId); // Resolve the promise with the clientId\n        this.ws.onmessage = this.onMessage.bind(this); // Reset the onmessage handler\n      }\n    };\n  }\n\n  onMessage(event: MessageEvent) {\n    if (!this.isActive) return;\n\n    const data = JSON.parse(event.data);\n\n    if (data.type === 'part') {\n      if (this.targetContainer) {\n        this.targetContainer.innerHTML += data.text;\n      }\n    }\n    this.caller.fire('wsMessage', { data, wsClientId: this.wsClientId });\n  }\n}\n"]}