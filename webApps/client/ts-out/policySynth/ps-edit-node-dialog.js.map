{"version":3,"file":"ps-edit-node-dialog.js","sourceRoot":"","sources":["../../src/policySynth/ps-edit-node-dialog.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\nimport '@material/web/dialog/dialog.js';\nimport '@material/web/button/text-button.js';\nimport '@material/web/button/filled-button.js';\nimport '@material/web/select/filled-select.js';\nimport '@material/web/select/select-option.js';\nimport '../yp-survey/yp-structured-question-edit.js';\nimport './ps-ai-model-selector.js';\n\nimport { PsAiModelSize, PsAiModelType } from '@policysynth/agents/aiModelTypes.js';\nimport { PsServerApi } from './PsServerApi.js';\nimport { YpBaseElement } from '../common/yp-base-element.js';\nimport { t } from 'i18next';\n\n@customElement('ps-edit-node-dialog')\nexport class PsEditNodeDialog extends YpBaseElement {\n  @property({ type: Boolean }) open = false;\n  @property({ type: Object }) nodeToEditInfo: any;\n\n  @property({ type: Number }) groupId!: number;\n\n  @state() private activeAiModels: PsAiModelAttributes[] = [];\n  @state() private selectedAiModels: {\n    [key in PsAiModelSize]?: number | null;\n  } = {};\n  @state() private selectedReasoningModels: { [key in PsAiModelSize]?: number | null } = {};\n\n  @state() private currentModels: {\n    [key in PsAiModelSize]?: PsAiModelAttributes;\n  } = {};\n\n  @state() private currentReasoningModels: {\n    [key in PsAiModelSize]?: PsAiModelAttributes;\n  } = {};\n\n  private api = new PsServerApi();\n\n  override async connectedCallback() {\n    super.connectedCallback();\n    await this.fetchActiveAiModels();\n  }\n\n  async fetchActiveAiModels() {\n    try {\n      this.activeAiModels = await this.api.getActiveAiModels(this.groupId);\n    } catch (error) {\n      console.error('Error fetching active AI models:', error);\n    }\n  }\n\n  override updated(changedProperties: Map<string, any>) {\n    super.updated(changedProperties);\n    if (changedProperties.has('open')) {\n      const wasOpen = changedProperties.get('open');\n      if (!wasOpen && this.open) {\n        this.initializeCurrentModels();\n      }\n    }\n  }\n\n  initializeCurrentModels() {\n    if (this.nodeToEditInfo && this.nodeToEditInfo.AiModels) {\n      this._getCurrentModels();\n    }\n  }\n\n  isReasoningModel(modelType: PsAiModelType): boolean {\n    return (\n      modelType === PsAiModelType.TextReasoning ||\n      modelType === PsAiModelType.MultiModalReasoning\n    );\n  }\n\n  _getCurrentModels() {\n    // We'll keep them separate to avoid overwriting\n    const currentAiModels: { [key in PsAiModelSize]?: PsAiModelAttributes } = {};\n    const currentReasoningModels: { [key in PsAiModelSize]?: PsAiModelAttributes } = {};\n\n    // Loop the attached models\n    this.nodeToEditInfo.AiModels?.forEach((model: PsAiModelAttributes) => {\n      const config = model.configuration;\n      if (!config?.type || !config?.modelSize) return;\n      const size = config.modelSize as PsAiModelSize;\n\n      // If it's reasoning\n      if (this.isReasoningModel(config.type)) {\n        currentReasoningModels[size] = model;\n      }\n      // else it's multiModal (or text, etc.)\n      else {\n        currentAiModels[size] = model;\n      }\n    });\n\n    // Assign them directly\n    this.currentModels = currentAiModels;\n    this.currentReasoningModels = currentReasoningModels;\n  }\n\n  disableScrim(event: CustomEvent) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  override render() {\n    return html`\n      <md-dialog\n        ?open=\"${this.open}\"\n        @closed=\"${this._handleClose}\"\n        @cancel=\"${this.disableScrim}\"\n      >\n        <div slot=\"headline\">\n          ${this.nodeToEditInfo ? this._renderNodeEditHeadline() : ''}\n        </div>\n        <div slot=\"content\" class=\"dialog-content\">\n          ${this.nodeToEditInfo ? this._renderEditForm() : ''}\n        </div>\n        <div slot=\"actions\">\n          <md-text-button @click=\"${this._handleClose}\"\n            >${this.t('cancel')}</md-text-button\n          >\n          <md-filled-button @click=\"${this._handleSave}\"\n            >${this.t('save')}</md-filled-button\n          >\n        </div>\n      </md-dialog>\n    `;\n  }\n\n  _renderNodeEditHeadline() {\n    return html`\n      <div class=\"layout horizontal\">\n        <div>\n          <img\n            src=\"${this.nodeToEditInfo.Class.configuration.imageUrl}\"\n            class=\"nodeEditHeadlineImage\"\n          />\n        </div>\n        <div class=\"nodeEditHeadlineTitle\">\n          ${this.nodeToEditInfo.Class.name}\n        </div>\n      </div>\n    `;\n  }\n\n  _renderEditForm() {\n    return html`\n      <div id=\"surveyContainer\">\n        ${this.nodeToEditInfo.Class.configuration.questions.map(\n          (question: YpStructuredQuestionData, index: number) => html`\n            <yp-structured-question-edit\n              index=\"${index}\"\n              id=\"structuredQuestion_${question.uniqueId\n                ? index\n                : `noId_${index}`}\"\n              .structuredAnswers=\"${this._getInitialAnswers()}\"\n              .question=\"${question}\"\n            >\n            </yp-structured-question-edit>\n          `\n        )}\n        ${this._renderAiModelSelector()}\n      </div>\n    `;\n  }\n\n  _renderAiModelSelector() {\n    if (!this.nodeToEditInfo.Class.configuration.requestedAiModelSizes) {\n      return '';\n    }\n\n    return html`\n      <ps-ai-model-selector\n        .activeAiModels=\"${this.activeAiModels}\"\n        .requestedAiModelSizes=\"${this.nodeToEditInfo.Class.configuration\n          .requestedAiModelSizes}\"\n        .currentModels=\"${this.currentModels}\"\n        .currentReasoningModels=\"${this.currentReasoningModels}\"\n        @ai-models-changed=\"${this._handleAiModelsChanged}\"\n      ></ps-ai-model-selector>\n    `;\n  }\n\n  _getInitialAnswers() {\n    return Object.entries(this.nodeToEditInfo.configuration).map(\n      ([key, value]) => ({\n        uniqueId: key,\n        value: value,\n      })\n    );\n  }\n\n  _handleClose() {\n    this.dispatchEvent(new CustomEvent('close'));\n    this.nodeToEditInfo = undefined;\n  }\n\n  _handleAiModelsChanged(e: CustomEvent) {\n    this.selectedAiModels = e.detail.selectedAiModelIds;\n    this.selectedReasoningModels = e.detail.selectedReasoningModelIds;\n  }\n\n  _handleSave() {\n    const updatedConfig = {} as Record<string, any>;\n    this.nodeToEditInfo.Class.configuration.questions.forEach(\n      (question: YpStructuredQuestionData, index: number) => {\n        const questionElement = this.shadowRoot?.querySelector(\n          `#structuredQuestion_${question.uniqueId ? index : `noId_${index}`}`\n        ) as any;\n        if (questionElement && question.uniqueId) {\n          const answer = questionElement.getAnswer();\n          if (answer) {\n            updatedConfig[question.uniqueId] = answer.value;\n          }\n        }\n      }\n    );\n\n    interface AiModelUpdate {\n      size: PsAiModelSize;\n      modelId: number | null;\n      type: PsAiModelType | null;  // or just string if you prefer\n    }\n\n    let aiModelUpdates: AiModelUpdate[] = [];\n\n    // 2) Grab the chosen model’s actual `type` from your activeAiModels list:\n    if (this.nodeToEditInfo.Class.configuration.requestedAiModelSizes) {\n      aiModelUpdates = [\n        // For multiModal picks:\n        ...Object.entries(this.selectedAiModels).map(([size, modelId]) => {\n          const chosenModel = this.activeAiModels.find(m => m.id === modelId);\n          debugger;\n          return {\n            size: size as PsAiModelSize,\n            modelId: modelId ? Number(modelId) : null,\n            type: chosenModel?.configuration?.type ?? null\n          };\n        }),\n        // For reasoning picks:\n        ...Object.entries(this.selectedReasoningModels).map(([size, modelId]) => {\n          const chosenModel = this.activeAiModels.find(m => m.id === modelId);\n          return {\n            size: size as PsAiModelSize,\n            modelId: modelId ? Number(modelId) : null,\n            type: chosenModel?.configuration?.type ?? null\n          };\n        })\n      ];\n    }\n\n    this.dispatchEvent(\n      new CustomEvent('save', {\n        detail: {\n          updatedConfig,\n          aiModelUpdates,\n          connectorType:\n            this.nodeToEditInfo.Class.configuration.type === 'input'\n              ? 'input'\n              : 'output',\n        },\n      })\n    );\n\n    this._handleClose();\n  }\n\n  static override get styles() {\n    return [\n      super.styles,\n      css`\n        .nodeEditHeadlineImage {\n          max-width: 100px;\n          margin-right: 16px;\n        }\n\n        .nodeEditHeadlineTitle {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          height: 55px;\n        }\n\n        md-dialog {\n          width: 90%;\n          height: 90%;\n        }\n\n        #surveyContainer {\n          margin-bottom: 48px;\n        }\n      `,\n    ];\n  }\n}\n"]}