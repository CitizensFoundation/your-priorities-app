import { nothing, TemplateResult } from "lit";
import "@material/web/progress/linear-progress.js";
import "@material/web/textfield/outlined-text-field.js";
import "@material/web/radio/radio.js";
import "../yp-file-upload/yp-file-upload.js";
import "../common/yp-emoji-selector.js";
import "../yp-point/yp-point.js";
import { YpBaseElementWithLogin } from "../common/yp-base-element-with-login.js";
export declare class YpPostPoints extends YpBaseElementWithLogin {
    fetchActive: boolean;
    isAdmin: boolean;
    disableDebate: boolean;
    points: Array<YpPointData> | undefined;
    downPoints: Array<YpPointData> | undefined;
    upPoints: Array<YpPointData> | undefined;
    newPointTextCombined: string | undefined;
    post: YpPostData;
    labelMobileUpOrDown: string | undefined;
    labelUp: string | undefined;
    labelDown: string | undefined;
    pointUpOrDownSelected: string;
    latestPointCreatedAt: Date | undefined;
    scrollToId: number | undefined;
    addPointDisabled: boolean;
    uploadedVideoUpId: number | undefined;
    uploadedVideoDownId: number | undefined;
    uploadedVideoMobileId: number | undefined;
    currentVideoId: number | undefined;
    hideUpVideo: boolean;
    hideDownVideo: boolean;
    hideMobileVideo: boolean;
    uploadedAudioUpId: number | undefined;
    uploadedAudioDownId: number | undefined;
    uploadedAudioMobileId: number | undefined;
    currentAudioId: number | undefined;
    hideUpAudio: boolean;
    hideDownAudio: boolean;
    hideMobileAudio: boolean;
    hideUpText: boolean;
    hideDownText: boolean;
    hideMobileText: boolean;
    selectedPointForMobile: boolean;
    isAndroid: boolean;
    hasCurrentUpVideo: string | undefined;
    hasCurrentDownVideo: string | undefined;
    hasCurrentMobileVideo: string | undefined;
    hasCurrentUpAudio: string | undefined;
    hasCurrentDownAudio: string | undefined;
    hasCurrentMobileAudio: string | undefined;
    storedPoints: Array<YpPointData> | undefined;
    loadedPointIds: Record<number, boolean>;
    loadMoreInProgress: boolean;
    totalCount: number | undefined;
    storedUpPointsCount: number;
    storedDownPointsCount: number;
    noMorePoints: boolean;
    get textValueUp(): string;
    _clearTextValueUp(): void;
    get textValueDown(): string;
    _clearTextValueDown(): void;
    get textValueMobileUpOrDown(): string;
    _clearTextValueMobileUpOrDown(): void;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    static get styles(): any[];
    renderAudioUpload(type: string, hideAudio: boolean, hasCurrentAudio: string | undefined, uploadAudioPointHeader: string): TemplateResult<1> | typeof nothing;
    renderVideoUpload(type: string, hideVideo: boolean, hasCurrentVideo: string | undefined, uploadVideoHeader: string, videoUploadedFunc: Function, uploadedVideoId: number | undefined): TemplateResult<1> | typeof nothing;
    renderMobilePointSelection(): void;
    renderPointItem(point: YpPointData, index: number): TemplateResult;
    renderPointHeader(header: string, alternativeHeader: string | undefined, headerTextType: string): TemplateResult<1>;
    renderPointList(type: string, header: string, alternativeHeader: string | undefined, headerTextType: string, label: string | undefined, hideVideo: boolean, hideText: boolean, hasCurrentVideo: string | undefined, videoUploadedFunc: Function, uploadVideoHeader: string, uploadedVideoId: number | undefined, pointFocusFunction: Function, hideAudio: boolean, hasCurrentAudio: string | undefined, uploadAudioPointHeader: string, ifLengthIsRight: boolean, addPointFunc: Function, points: Array<YpPointData> | undefined, mobile?: boolean): TemplateResult<1>;
    scrollEvent(event: any): void;
    renderTranslationPlaceholders(): TemplateResult<1>;
    render(): TemplateResult<1>;
    _chooseUpOrDownRadio(): void;
    get wideReady(): false | YpPostData;
    get smallReady(): false | YpPostData;
    get pointMaxLength(): number;
    _openLogin(): void;
    _videoUpUploaded(event: CustomEvent): void;
    _videoDownUploaded(event: CustomEvent): void;
    _videoMobileUploaded(event: CustomEvent): void;
    _audioUpUploaded(event: CustomEvent): void;
    _audioDownUploaded(event: CustomEvent): void;
    _audioMobileUploaded(event: CustomEvent): void;
    get mobileScrollOffset(): number;
    get listResizeScrollThreshold(): number;
    get listPaddingTop(): 500 | 600;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _listResize(): void;
    _loadNewPointsIfNeeded(event: CustomEvent): void;
    _loadMorePoints(): void;
    _interleaveMorePoints(points: Array<YpPointData>): YpPointData[];
    _getMorePoints(): Promise<void>;
    _clearScrollTrigger(): void;
    _getNewPoints(): Promise<void>;
    _pointDeleted(): void;
    _pointsChanged(): void;
    _updateEmojiBindings(): void;
    _pointUpOrDownSelectedChanged(): void;
    _clearVideo(): void;
    _clearAudio(): void;
    _isAdminChanged(): void;
    _getPoints(): Promise<void>;
    _postChanged(): void;
    removeElementsByClass(rootElement: HTMLElement, className: string): void;
    _updatePointLabels(): void;
    _processStoredPoints(): void;
    _updatePointInLists(event: CustomEvent): void;
    _checkForMultipleLanguages(): void;
    interleaveArrays(arrayA: Array<YpPointData>, arrayB: Array<YpPointData>): YpPointData[];
    _scrollPointIntoView(): void;
    _preProcessPoints(points: Array<YpPointData>): Array<YpPointData>;
    _updateCounterInfo(): void;
    _insertNewPoint(point: YpPointData): Promise<void>;
    _addMorePoint(point: YpPointData): boolean;
    _completeNewPointResponse(point: YpPointData): void;
    addPointUp(): void;
    addPointDown(): void;
    addMobilePointUpOrDown(): void;
    addPoint(content: string, value: number, videoId: number | undefined, audioId: number | undefined): Promise<void>;
    focusUpPoint(): void;
    focusDownPoint(): void;
    focusMobilePoint(): void;
    focusOutlinedTextField(event: CustomEvent): void;
    blurOutlinedTextField(event: CustomEvent): void;
    _hasCurrentUpVideo(): void;
    _hasCurrentDownVideo(): void;
    _hasCurrentUpAudio(): void;
    _hasCurrentDownAudio(): void;
    _hasCurrentMobileVideo(): void;
    _hasCurrentMobileAudio(): void;
    get ifLengthUpIsRight(): boolean;
    get ifLengthDownIsRight(): boolean;
    get ifLengthMobileIsRight(): boolean;
    ifLengthIsRight(type: string, textValue: string | undefined, hasVideoId: number | undefined, hasAudioId: number | undefined): boolean;
}
//# sourceMappingURL=yp-post-points.d.ts.map