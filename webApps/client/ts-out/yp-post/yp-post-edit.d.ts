import { nothing, TemplateResult } from "lit";
import "@material/web/radio/radio.js";
import "@material/web/tabs/secondary-tab.js";
import "@material/web/tabs/tabs.js";
import "@material/web/textfield/outlined-text-field.js";
import "../common/yp-generate-ai-image.js";
import "../common/yp-image.js";
import "../common/yp-form.js";
import { YpEditBase } from "../common/yp-edit-base.js";
import "../yp-survey/yp-structured-question-edit.js";
import "../yp-edit-dialog/yp-edit-dialog.js";
import "@material/web/iconbutton/filled-icon-button.js";
export declare class YpPostEdit extends YpEditBase {
    action: string;
    newPost: boolean;
    selectedCategoryArrayId: number | undefined;
    initialStructuredAnswersJson: Array<YpStructuredAnswer> | undefined;
    structuredQuestions: Array<YpStructuredQuestionData> | undefined;
    post: YpPostData | undefined;
    group: YpGroupData | undefined;
    saveSurveyAnswers: boolean;
    skipIfSavedSurveyAnswers: boolean;
    locationHidden: boolean;
    location: YpLocationData | undefined;
    encodedLocation: string | undefined;
    selectedCategoryId: number | undefined;
    uploadedVideoId: number | undefined;
    subRoute: string;
    uploadedAudioId: number | undefined;
    currentVideoId: number | undefined;
    currentAudioId: number | undefined;
    selected: number;
    mapActive: boolean;
    hasOnlyOneSection: boolean;
    postDescriptionLimit: number | undefined;
    sructuredAnswersString: string | undefined;
    structuredAnswersJson: string;
    structuredAnswersString: string;
    translatedQuestions: Array<YpStructuredQuestionData> | undefined;
    autoTranslate: boolean;
    uploadedDocumentUrl: string | undefined;
    uploadedDocumentFilename: string | undefined;
    selectedCoverMediaType: string;
    uploadedHeaderImageId: number | undefined;
    customTitleQuestionText: string | undefined;
    emailValidationPattern: string;
    liveQuestionIds: Array<number>;
    uniqueIdsToElementIndexes: Record<string, number>;
    liveUniqueIds: Array<string>;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    _getQuestionLengthWithSubOptions(questions: string | any[]): number;
    customValidation(): boolean;
    _getTranslationsIfNeeded(): Promise<void>;
    _groupChanged(): void;
    _generateLogo(event: CustomEvent): void;
    static get styles(): any[];
    renderMoreContactInfo(): TemplateResult<1>;
    get titleQuestionText(): string;
    renderDescriptionSection(): TemplateResult<1> | typeof nothing;
    renderPointSection(): TemplateResult<1> | typeof nothing;
    renderLocationSection(): TemplateResult<1> | typeof nothing;
    renderCoverMediaSelection(): TemplateResult<1>;
    renderMediaSection(): TemplateResult<1>;
    _setSelectedCoverMediaType(event: CustomEvent): void;
    get _pointPageHidden(): boolean;
    renderHiddenInputs(): TemplateResult<1>;
    render(): TemplateResult<1>;
    _gotAiImage(event: CustomEvent): void;
    _alternativeTextForNewIdeaSaveButtonTranslation(): void;
    _updatePostTitle(): void;
    loadPost(postId: number): Promise<void>;
    loadGroup(groupId: number): Promise<void>;
    connectedCallback(): void;
    disconnectedCallback(): void;
    hasLongSaveText(): boolean | "" | undefined;
    _autoTranslateEvent(event: CustomEvent): void;
    _isLastRating(index: number): boolean | undefined;
    _isFirstRating(index: number): boolean | undefined;
    _openToId(event: CustomEvent): void;
    _goToNextIndex(event: CustomEvent): void;
    _skipToId(event: CustomEvent, showItems: boolean): void;
    _skipToWithHideId(event: CustomEvent, showItems: boolean): void;
    get replacedName(): string | null;
    get pointMaxLength(): number;
    _floatIfValueOrIE(value: boolean): boolean;
    get newPointShown(): boolean;
    _submitWithStructuredQuestionsJson(): void;
    _reallySubmit(something?: boolean): void;
    _submitWithStructuredQuestionsString(): void;
    _customSubmit(): void;
    _resizeScrollerIfNeeded(): void;
    _getStructuredQuestionsString(): YpStructuredQuestionData[];
    _setupStructuredQuestions(): undefined;
    get showVideoCover(): number | undefined;
    get showAudioCover(): number | undefined;
    _videoUploaded(event: CustomEvent): void;
    _audioUploaded(event: CustomEvent): void;
    _documentUploaded(event: CustomEvent): void;
    customFormResponse(): void;
    _updateEmojiBindings(): void;
    _locationHiddenChanged(): void;
    _formInvalid(): void;
    _locationChanged(): void;
    _uploadedHeaderImageIdChanged(): void;
    _getSectionLength(): number;
    _nextSection(): void;
    _selectedChanged(): void;
    _selectedCategory(event: CustomEvent): void;
    _selectedCategoryChanged(): void;
    get showCategories(): boolean;
    getPositionInArrayFromId(collection: Array<YpCategoryData>, id: number): number | undefined;
    _postChanged(): void;
    _updateInitialCategory(group: YpGroupData): void;
    _imageUploaded(event: CustomEvent): void;
    _redirectAfterVideo(post: YpPostData): Promise<void>;
    _redirectAfterAudio(post: YpPostData): Promise<void>;
    get surveyAnswerLocalstorageKey(): string;
    saveSurveyAnswersToLocalStorage(): void;
    checkSurveyAnswers(): Promise<void>;
    customRedirect(post: YpPostData): void;
    _finishRedirect(post: YpPostData): void;
    clear(): void;
    setup(post: YpPostData | undefined, newItem: boolean, refreshFunction: Function | undefined, group: YpGroupData, params?: any | undefined): Promise<void>;
    _setupGroup(): void;
    get mediaHidden(): boolean;
    _alternativeTextForNewIdeaButtonHeaderTranslation(): void;
    setupTranslation(): void;
}
//# sourceMappingURL=yp-post-edit.d.ts.map