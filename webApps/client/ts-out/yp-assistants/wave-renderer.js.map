{"version":3,"file":"wave-renderer.js","sourceRoot":"","sources":["../../src/yp-assistants/wave-renderer.ts"],"names":[],"mappings":"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","sourcesContent":["export class WavRenderer {\n  /**\n   * Draws frequency bars on a canvas\n   * @param canvas - The canvas element to draw on\n   * @param ctx - The canvas context\n   * @param frequencies - Frequency data to visualize\n   * @param color - Color of the bars\n   * @param barWidth - Width of each frequency bar\n   * @param minHeight - Minimum height of bars\n   * @param scale - Scale factor for bar heights\n   */\n  static drawBars(\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D,\n    frequencies: Float32Array,\n    color: string = '#0099ff',\n    barWidth: number = 10,\n    minHeight: number = 0,\n    scale: number = 8\n  ): void {\n    if (!canvas || !ctx || !frequencies) return;\n\n    const width: number = canvas.width;\n    const height: number = canvas.height;\n    const centerY: number = height / 2;\n    const bars: number = Math.min(Math.floor(width / barWidth), frequencies.length);\n    const step: number = Math.floor(frequencies.length / bars);\n\n    ctx.fillStyle = color;\n\n    for (let i = 0; i < bars; i++) {\n      // Get average of frequency range for this bar\n      let sum: number = 0;\n      for (let j = 0; j < step; j++) {\n        sum += frequencies[i * step + j] || 0;\n      }\n      const average: number = sum / step;\n\n      // Calculate bar height based on frequency average\n      const barHeight: number = Math.max(minHeight, average * height * scale);\n\n      // Draw mirrored bars\n      const x: number = i * barWidth;\n\n      // Upper bar\n      ctx.fillRect(\n        x,\n        centerY - barHeight / 2,\n        barWidth - 2,\n        barHeight / 2\n      );\n\n      // Lower bar (mirrored)\n      ctx.fillRect(\n        x,\n        centerY,\n        barWidth - 2,\n        barHeight / 2\n      );\n    }\n  }\n\n  /**\n   * Creates a smooth gradient effect for the waveform\n   * @param ctx - The canvas context\n   * @param width - Width of the gradient\n   * @param height - Height of the gradient\n   * @param color - Base color for the gradient\n   */\n  static createGradient(\n    ctx: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    color: string = '#0099ff'\n  ): CanvasGradient {\n    const gradient: CanvasGradient = ctx.createLinearGradient(0, 0, width, 0);\n    gradient.addColorStop(0, color);\n    gradient.addColorStop(1, this.adjustColor(color, 20)); // slightly lighter variant\n    return gradient;\n  }\n\n  /**\n   * Adjusts the brightness of a color\n   * @param color - The base color in hex format\n   * @param percent - Percentage to adjust brightness\n   */\n  private static adjustColor(color: string, percent: number): string {\n    const num: number = parseInt(color.replace('#', ''), 16);\n    const r: number = (num >> 16) + percent;\n    const g: number = ((num >> 8) & 0x00FF) + percent;\n    const b: number = (num & 0x0000FF) + percent;\n\n    const adjustedColor: string = '#' + (\n      0x1000000 +\n      (r < 255 ? (r < 1 ? 0 : r) : 255) * 0x10000 +\n      (g < 255 ? (g < 1 ? 0 : g) : 255) * 0x100 +\n      (b < 255 ? (b < 1 ? 0 : b) : 255)\n    ).toString(16).slice(1);\n\n    return adjustedColor;\n  }\n}"]}