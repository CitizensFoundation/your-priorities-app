{"version":3,"file":"yp-agent-configuration-widget.js","sourceRoot":"","sources":["../../../src/yp-assistants/widgets/yp-agent-configuration-widget.ts"],"names":[],"mappings":"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","sourcesContent":["import { customElement, property } from \"lit/decorators.js\";\nimport { YpBaseElement } from \"../../common/yp-base-element.js\";\nimport { css, html } from \"lit\";\n\nimport \"@material/web/iconbutton/filled-icon-button.js\";\nimport { YpAssistantServerApi } from \"../AssistantServerApi.js\";\nimport { YpSnackbar } from \"../../yp-app/yp-snackbar.js\";\n\n@customElement(\"yp-agent-configuration-widget\")\nexport class YpAgentConfigurationWidget extends YpBaseElement {\n  @property({ type: Number })\n  agentProductId!: number;\n\n  @property({ type: String })\n  agentName!: string;\n\n  @property({ type: String })\n  subscriptionId!: string;\n\n  @property({ type: Number })\n  domainId!: number;\n\n  @property({ type: String })\n  agentDescription!: string;\n\n  @property({ type: String })\n  agentImageUrl!: string;\n\n  @property({ type: String })\n  requiredQuestions!: string;\n\n  @property({ type: String })\n  requiredQuestionsAnswered!: string;\n\n  @property({ type: Boolean })\n  haveSubmittedConfigurationPastSecond = false;\n\n  serverApi!: YpAssistantServerApi;\n\n  constructor() {\n    super();\n    this.serverApi = new YpAssistantServerApi(\n      window.appGlobals.currentClientMemoryUuid!\n    );\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    this.addGlobalListener(\n      \"assistant-requested-submit-agent-configuration\",\n      this.submitConfiguration.bind(this)\n    );\n  }\n\n  override disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.removeGlobalListener(\n      \"assistant-requested-submit-agent-configuration\",\n      this.submitConfiguration.bind(this)\n    );\n  }\n\n  static override get styles() {\n    return [\n      super.styles,\n      css`\n        :host {\n          display: block;\n          width: 100%;\n        }\n\n        .container {\n          border-radius: 4px;\n          width: 100%;\n          max-width: calc(768px - 12px);\n          width: calc(768px - 12px);\n        }\n\n        @media (max-width: 820px) {\n          .container {\n            min-width: 100%;\n          }\n        }\n\n        .agent-header-title {\n          font-size: 22px;\n          font-weight: 700;\n          color: var(--md-sys-color-on-surface);\n          font-family: var(--md-ref-typeface-brand);\n          margin-bottom: 8px;\n        }\n\n        md-filled-button {\n          margin-left: auto;\n          margin-top: 8px;\n        }\n\n        md-filled-icon-button {\n          margin-left: 8px;\n          margin-top: 8px;\n        }\n\n        md-filled-button[has-static-theme] {\n          --md-filled-button-container-color: var(\n            --md-sys-color-primary-container\n          );\n          --md-sys-color-on-primary: var(--md-sys-color-on-primary-container);\n        }\n      `,\n    ];\n  }\n\n  override async firstUpdated() {\n    await this.getAgentConfiguration();\n  }\n\n  async getAgentConfiguration() {\n    try {\n      const response = await this.serverApi.getConfigurationAnswers(\n        this.domainId,\n        this.subscriptionId\n      );\n\n      if (response.success && response.data) {\n        this.requiredQuestionsAnswered = JSON.stringify(response.data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching previously saved answers:\", error);\n      //TODO: Fire user error\n    }\n  }\n\n  getPrefillValue(question: YpStructuredQuestionData) {\n    const prefilledValue =\n    this.parsedRequiredQuestionsAnswered.find(\n      (answer) => answer.uniqueId === question.uniqueId\n    )?.value || \"\";\n\n    return prefilledValue;\n  }\n\n  async submitConfiguration() {\n    console.log(\"submitConfiguration\");\n\n    if (this.haveSubmittedConfigurationPastSecond) {\n      console.error(\n        \"Already submitted configuration past second\",\n        new Error().stack\n      );\n\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      this.haveSubmittedConfigurationPastSecond = false;\n      return;\n    } else {\n      this.haveSubmittedConfigurationPastSecond = true;\n    }\n\n    // Parse the required questions\n    const questions = this.parsedRequiredQuestions; // from get parsedRequiredQuestions()\n\n    // Gather answers from user inputs\n    const answers: YpStructuredAnswer[] = [];\n    if (questions.length > 0) {\n      for (const question of questions) {\n        const questionElement = this.shadowRoot!.querySelector(\n          `#structuredQuestion_${\n            question.uniqueId || `noId_${questions.indexOf(question)}`\n          }`\n        ) as any;\n        if (questionElement) {\n          const answer = questionElement.getAnswer();\n          if (answer) {\n            answers.push({\n              uniqueId: question.uniqueId!,\n              value: (answer.value || \"\").trim(),\n            });\n          }\n        }\n      }\n    }\n\n    // 1) Enforce a “fully answered” check\n    //    i.e. you must have as many answers as there are required questions.\n    if (questions.length > 0 && answers.length < questions.length) {\n      this.sendError(\n        \"You must complete all required configuration questions before submitting.\"\n      );\n      this.haveSubmittedConfigurationPastSecond = false;\n      return;\n    }\n\n    // 2) Enforce each answer is non-empty\n    for (const question of questions) {\n      const found = answers.find((a) => a.uniqueId === question.uniqueId);\n      if (!found || !found.value) {\n        this.sendError(\n           \"Please complete all required questions\"\n        );\n        this.haveSubmittedConfigurationPastSecond = false;\n        return;\n      }\n    }\n\n    try {\n      await this.serverApi.submitAgentConfiguration(\n        this.domainId,\n        this.subscriptionId,\n        answers\n      );\n    } catch (error) {\n      this.sendError(\"Error submitting agent configuration\");\n      return;\n    }\n\n    this.fireGlobal(\"agent-configuration-submitted\");\n  }\n\n  sendError(message: string) {\n    window.appDialogs.getDialogAsync(\"masterToast\", (toast: YpSnackbar) => {\n      toast.labelText = message;\n      toast.open = true;\n      debugger;\n    });\n  }\n\n  get parsedRequiredQuestions(): YpStructuredQuestionData[] {\n    try {\n      const questions = JSON.parse(this.requiredQuestions);\n      questions.forEach((question: YpStructuredQuestionData) => {\n        question.rows = 14;\n      });\n      return questions;\n    } catch (error) {\n      console.error(\"Error parsing required questions\", error);\n      return [];\n    }\n  }\n\n  get parsedRequiredQuestionsAnswered(): YpStructuredAnswer[] {\n    try {\n      return JSON.parse(this.requiredQuestionsAnswered);\n    } catch (error) {\n      console.error(\"Error parsing required questions answered\", error);\n      return [];\n    }\n  }\n\n  private renderAgentHeader() {\n    return html`<div class=\"agent-header layout horizontal\">\n      <div class=\"agent-header-title\">${this.t(\"agentConfiguration\")}</div>\n      <div class=\"flex\"></div>\n    </div>`;\n  }\n\n  override render() {\n    return html`\n      <div class=\"layout vertical container\">\n        ${this.renderAgentHeader()}\n        <div class=\"content\">\n          <div id=\"surveyContainer\">\n            ${this.parsedRequiredQuestions.map(\n              (question: YpStructuredQuestionData, index: number) => html`\n                <yp-structured-question-edit\n                  index=\"${index}\"\n                  id=\"structuredQuestion_${question.uniqueId ||\n                  `noId_${index}`}\"\n                  .question=\"${question}\"\n                  .value=\"${this.getPrefillValue(question)}\"\n                >\n                </yp-structured-question-edit>\n              `\n            )}\n          </div>\n        </div>\n        <div class=\"layout horizontal\">\n          <md-filled-button\n            ?has-static-theme=\"${this.hasStaticTheme}\"\n            @click=\"${this.submitConfiguration}\"\n          >\n            ${this.t(\"Submit\")}\n          </md-filled-button>\n        </div>\n      </div>\n    `;\n  }\n}\n"]}