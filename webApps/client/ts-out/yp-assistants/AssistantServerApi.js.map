{"version":3,"file":"AssistantServerApi.js","sourceRoot":"","sources":["../../src/yp-assistants/AssistantServerApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { StringUnitLength } from \"luxon\";\nimport { YpServerApi } from \"../common/YpServerApi.js\";\n\ninterface SavedChat {\n  serverMemoryId: string;\n  questionSnippet: string;\n}\n\nexport class YpAssistantServerApi extends YpServerApi {\n  private readonly localStorageChatsKey = \"yp-assistant-chats-v1\";\n  clientMemoryUuid: string;\n  constructor(clientMemoryUuid: string, urlPath: string = \"/api/assistants\") {\n    super();\n    this.baseUrlPath = urlPath;\n    this.clientMemoryUuid = clientMemoryUuid;\n  }\n\n  public async sendChatMessage(\n    domainId: number,\n    wsClientId: string,\n    chatLog: PsSimpleChatLog[],\n    languageName: string,\n    currentMode: string | undefined = undefined,\n    serverMemoryId?: string\n  ): Promise<{ serverMemoryId: string }> {\n    const response = await this.fetchWrapper(\n      this.baseUrlPath + `/${domainId}/chat`,\n      {\n        method: \"PUT\",\n        body: JSON.stringify({\n          wsClientId,\n          chatLog,\n          languageName,\n          currentMode,\n          serverMemoryId,\n          clientMemoryUuid: this.clientMemoryUuid,\n        }),\n      },\n      true\n    );\n\n    if (response.serverMemoryId) {\n      this.saveChatToLocalStorage(response.serverMemoryId, chatLog);\n    }\n\n    return response;\n  }\n\n\n  public updateAssistantMemoryUserLoginStatus(domainId: number  ) {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/${domainId}/updateAssistantMemoryLoginStatus`,\n      { method: 'PUT', body: JSON.stringify({ domainId, clientMemoryUuid: this.clientMemoryUuid }) }\n    );\n  }\n\n\n  public async getMemoryFromServer(domainId: number): Promise<{\n    chatLog: PsSimpleChatLog[];\n  }> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/${domainId}/memory?clientMemoryUuid=${this.clientMemoryUuid}`,\n      {\n        method: \"GET\",\n      },\n      true\n    );\n  }\n\n  public clearChatLogFromServer(domainId: number): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/${domainId}/chatlog?clientMemoryUuid=${this.clientMemoryUuid}`,\n      {\n        method: \"DELETE\",\n      },\n      false\n    );\n  }\n\n  public startVoiceSession(\n    domainId: number,\n    wsClientId: string,\n    currentMode: string,\n    serverMemoryId?: string\n  ): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/${domainId}/voice`,\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          wsClientId,\n          currentMode,\n          serverMemoryId,\n          clientMemoryUuid: this.clientMemoryUuid,\n        })\n      },\n      false\n    );\n  }\n\n  private saveChatToLocalStorage(serverMemoryId: string, chatLog: PsSimpleChatLog[]): void {\n    try {\n      const savedChats = this.loadChatsFromLocalStorage();\n      if (chatLog.length > 0) {\n        const questionSnippet = chatLog[0].message.slice(0, 40);\n        const newChat: SavedChat = {\n          serverMemoryId,\n          questionSnippet,\n        };\n\n        // Check if chat already exists\n        const existingChatIndex = savedChats.findIndex(\n          chat => chat.serverMemoryId === serverMemoryId\n        );\n\n        if (existingChatIndex >= 0) {\n          savedChats[existingChatIndex] = newChat;\n        } else {\n          savedChats.push(newChat);\n        }\n\n        localStorage.setItem(this.localStorageChatsKey, JSON.stringify(savedChats));\n      }\n    } catch (error) {\n      console.error('Error saving chat to local storage:', error);\n    }\n  }\n\n  public loadChatsFromLocalStorage(): SavedChat[] {\n    try {\n      const storedChats = localStorage.getItem(this.localStorageChatsKey);\n      return storedChats ? JSON.parse(storedChats) : [];\n    } catch (error) {\n      console.error('Error loading chats from local storage:', error);\n      return [];\n    }\n  }\n\n  public clearServerMemory(serverMemoryId: string): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/memory/${serverMemoryId}?clientMemoryUuid=${this.clientMemoryUuid}`,\n      {\n        method: \"DELETE\",\n      },\n      false\n    );\n  }\n}"]}