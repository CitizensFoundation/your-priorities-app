{"version":3,"file":"AssistantServerApi.js","sourceRoot":"","sources":["../../src/yp-assistants/AssistantServerApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { YpServerApi } from \"../common/YpServerApi.js\";\nimport { YpStreamingLlmBase } from \"../yp-chatbots/yp-streaming-llm-base.js\";\n\ninterface SavedChat {\n  serverMemoryId: string;\n  questionSnippet: string;\n}\n\nexport class YpAssistantServerApi extends YpServerApi {\n  private readonly localStorageChatsKey = \"yp-assistant-chats-v2\";\n  clientMemoryUuid: string;\n  constructor(clientMemoryUuid: string, urlPath: string = \"/api/assistants\") {\n    super();\n    this.baseUrlPath = urlPath;\n    this.clientMemoryUuid = clientMemoryUuid;\n  }\n\n  public async startNextWorkflowStep(\n    groupId: number,\n    agentId: string\n  ): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/${groupId}/startNextWorkflowStep`,\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          agentId,\n        }),\n      }\n    );\n  }\n\n  public sendEmailInvitesForAnons(\n    groupId: number,\n    agentId: string,\n    agentRunId: number,\n    emails: string\n  ): Promise<void> {\n    return this.fetchWrapper(\n      `/api/groups/${groupId}/sendEmailInvitesForAnons`,\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          agentId,\n          agentRunId,\n          emails,\n        }),\n      }\n    );\n  }\n\n  public async stopCurrentWorkflowStep(\n    groupId: number,\n    agentId: string\n  ): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/${groupId}/stopCurrentWorkflowStep`,\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          agentId,\n        }),\n      }\n    );\n  }\n\n  public async sendChatMessage(\n    domainId: number,\n    wsClientId: string,\n    chatLog: YpSimpleChatLog[],\n    languageName: string,\n    currentMode: string | undefined = undefined,\n    serverMemoryId?: string\n  ): Promise<{ serverMemoryId: string }> {\n    try {\n      const response = await this.fetchWrapper(\n        this.baseUrlPath + `/${domainId}/chat`,\n        {\n          method: \"PUT\",\n          body: JSON.stringify({\n            wsClientId,\n            chatLog,\n            languageName,\n            currentMode,\n            serverMemoryId,\n            clientMemoryUuid: this.clientMemoryUuid,\n          }),\n        },\n        false,\n        undefined,\n        true\n      );\n\n      if (\n        response.status &&\n        (response.status === 401 || response.status === 403)\n      ) {\n        throw {\n          status: response.status,\n          message: response.status === 401 ? \"Unauthorized\" : \"Forbidden\",\n        };\n      }\n\n      if (response.status && response.status === 500) {\n        throw new Error(\"Internal Server Error\");\n      }\n\n      if (response.serverMemoryId) {\n        this.saveChatToLocalStorage(response.serverMemoryId, chatLog);\n      }\n      return response;\n    } catch (err: any) {\n      if (err && err.status && (err.status === 401 || err.status === 403)) {\n        throw err;\n      }\n\n      console.warn(\n        \"Error detected on sendChatMessage, triggering reconnection...\"\n      );\n      YpStreamingLlmBase.scheduleReconnect();\n\n      try {\n        // Wait for the reconnection with retry delays.\n        await this.waitForWsReconnectionWithRetry();\n        // Once reconnected, try sending the message again.\n        return await this.sendChatMessage(\n          domainId,\n          wsClientId,\n          chatLog,\n          languageName,\n          currentMode,\n          serverMemoryId\n        );\n      } catch (reconnectErr) {\n        // If reconnection still fails after retries, throw error to user.\n        throw new Error(\"Reconnection failed, please try again later.\");\n      }\n    }\n  }\n\n  public async startVoiceSession(\n    domainId: number,\n    wsClientId: string,\n    currentMode: string,\n    serverMemoryId?: string\n  ): Promise<void> {\n    try {\n      return this.fetchWrapper(\n        this.baseUrlPath + `/${domainId}/voice`,\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            wsClientId,\n            currentMode,\n            serverMemoryId,\n            clientMemoryUuid: this.clientMemoryUuid,\n          }),\n        },\n        false,\n        undefined,\n        true\n      );\n    } catch (err) {\n      console.warn(\n        \"Error detected on startVoiceSession, triggering reconnection...\"\n      );\n      YpStreamingLlmBase.scheduleReconnect();\n\n      try {\n        // Wait for the reconnection with retry delays.\n        await this.waitForWsReconnectionWithRetry();\n        // Once reconnected, try sending the message again.\n        return await this.startVoiceSession(\n          domainId,\n          wsClientId,\n          currentMode,\n          serverMemoryId\n        );\n      } catch (reconnectErr) {\n        // If reconnection still fails after retries, throw error to user.\n        throw new Error(\"Reconnection failed, please try again later.\");\n      }\n    }\n  }\n\n  public updateAssistantMemoryUserLoginStatus(domainId: number) {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/${domainId}/updateAssistantMemoryLoginStatus`,\n      {\n        method: \"PUT\",\n        body: JSON.stringify({\n          domainId,\n          clientMemoryUuid: this.clientMemoryUuid,\n        }),\n      }\n    );\n  }\n\n  public async getMemoryFromServer(domainId: number): Promise<{\n    chatLog: YpSimpleChatLog[];\n  }> {\n    return this.fetchWrapper(\n      this.baseUrlPath +\n        `/${domainId}/memory?clientMemoryUuid=${this.clientMemoryUuid}`,\n      {\n        method: \"GET\",\n      },\n      true\n    );\n  }\n\n  public clearChatLogFromServer(domainId: number): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath +\n        `/${domainId}/chatlog?clientMemoryUuid=${this.clientMemoryUuid}`,\n      {\n        method: \"DELETE\",\n      },\n      false\n    );\n  }\n\n  private saveChatToLocalStorage(\n    serverMemoryId: string,\n    chatLog: YpSimpleChatLog[]\n  ): void {\n    try {\n      const savedChats = this.loadChatsFromLocalStorage();\n      if (chatLog.length > 0) {\n        const questionSnippet = chatLog[0].message.slice(0, 40);\n        const newChat: SavedChat = {\n          serverMemoryId,\n          questionSnippet,\n        };\n\n        // Check if chat already exists\n        const existingChatIndex = savedChats.findIndex(\n          (chat) => chat.serverMemoryId === serverMemoryId\n        );\n\n        if (existingChatIndex >= 0) {\n          savedChats[existingChatIndex] = newChat;\n        } else {\n          savedChats.push(newChat);\n        }\n\n        localStorage.setItem(\n          this.localStorageChatsKey,\n          JSON.stringify(savedChats)\n        );\n      }\n    } catch (error) {\n      console.error(\"Error saving chat to local storage:\", error);\n    }\n  }\n\n  public loadChatsFromLocalStorage(): SavedChat[] {\n    try {\n      const storedChats = localStorage.getItem(this.localStorageChatsKey);\n      return storedChats ? JSON.parse(storedChats) : [];\n    } catch (error) {\n      console.error(\"Error loading chats from local storage:\", error);\n      return [];\n    }\n  }\n\n  public clearServerMemory(serverMemoryId: string): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath +\n        `/memory/${serverMemoryId}?clientMemoryUuid=${this.clientMemoryUuid}`,\n      {\n        method: \"DELETE\",\n      },\n      false\n    );\n  }\n\n  public submitAgentConfiguration(\n    domainId: number,\n    subscriptionId: string,\n    requiredQuestionsAnswers: YpStructuredAnswer[]\n  ): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath +\n        `/${domainId}/${subscriptionId}/submitAgentConfiguration`,\n      {\n        method: \"PUT\",\n        body: JSON.stringify({\n          requiredQuestionsAnswers,\n          clientMemoryUuid: this.clientMemoryUuid,\n        }),\n      }\n    );\n  }\n\n  public getConfigurationAnswers(\n    domainId: number,\n    subscriptionId: string\n  ): Promise<{ success: boolean; data: YpStructuredAnswer[] }> {\n    return this.fetchWrapper(\n      this.baseUrlPath +\n        `/${domainId}/${subscriptionId}/getConfigurationAnswers`\n    );\n  }\n\n  // Helper function that waits for a reconnection event with a given timeout.\n  private waitForWsReconnection(timeout: number): Promise<boolean> {\n    return new Promise((resolve) => {\n      let resolved = false;\n\n      // Handler for the WS reconnection event.\n      const onWsConnected = () => {\n        resolved = true;\n        window.removeEventListener(\"wsConnected\", onWsConnected);\n        resolve(true);\n      };\n\n      // Listen for the global reconnection event.\n      window.addEventListener(\"wsConnected\", onWsConnected, { once: true });\n\n      // Set a timeout after which we resolve false if not reconnected.\n      setTimeout(() => {\n        if (!resolved) {\n          window.removeEventListener(\"wsConnected\", onWsConnected);\n          resolve(false);\n        }\n      }, timeout);\n    });\n  }\n\n  // Retry function that attempts reconnection with delays: 1 sec, 3 sec, 5 sec.\n  private async waitForWsReconnectionWithRetry(): Promise<void> {\n    const retryDelays = [1000, 3000, 5000, 10000, 20000, 30000];\n    for (const delay of retryDelays) {\n      console.log(`Waiting ${delay}ms for WebSocket reconnection...`);\n      const reconnected = await this.waitForWsReconnection(delay);\n      if (reconnected) {\n        console.log(\"WebSocket reconnected successfully.\");\n        return; // Exit once reconnected.\n      }\n    }\n    // If all retries fail, throw an error.\n    throw new Error(\"WebSocket reconnection failed after 3 attempts.\");\n  }\n}\n"]}