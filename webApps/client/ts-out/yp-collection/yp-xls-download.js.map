{"version":3,"file":"yp-xls-download.js","sourceRoot":"","sources":["../../src/yp-collection/yp-xls-download.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAc,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AACnE,OAAO,uCAAuC,CAAC;AAC/C,OAAO,yCAAyC,CAAC;AACjD,OAAO,2CAA2C,CAAC;AACnD,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAE7D;;;;;;;;;;;;;;;GAeG;AAEI,IAAM,aAAa,GAAnB,MAAM,aAAc,SAAQ,aAAa;IAAzC;;QACL;;WAEG;QACyB,mBAAc,GAAG,OAAO,CAAC;QAOrD;;;WAGG;QACyB,kBAAa,GAAG,cAAc,CAAC;QAE3D;;;WAGG;QACyB,kBAAa,GAAG,cAAc,CAAC;QAkB3D;;WAEG;QACc,wBAAmB,GAAG,KAAK,CAAC;IAkN/C,CAAC;IAtMC,MAAM,KAAc,MAAM;QACxB,OAAO;YACL,KAAK,CAAC,MAAM;YACZ,2BAA2B;YAC3B,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6BF;SACF,CAAC;IACJ,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;;;sCAGuB,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ;;;UAG5D,CAAC,IAAI,CAAC,YAAY;YAClB,CAAC,CAAC,IAAI,CAAA;;0BAEU,IAAI,CAAC,kBAAkB;6BACpB,IAAI,CAAC,WAAW,KAAK,SAAS;gBAC3C,IAAI,CAAC,WAAW,GAAG,GAAG;;kBAEpB,IAAI,CAAC,WAAW,KAAK,SAAS;gBAC9B,CAAC,CAAC,IAAI,CAAC,aAAa;gBACpB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC;;;;gBAI3B,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,GAAG,GAAG;gBACxD,CAAC,CAAC,IAAI,CAAA;;gCAEU,IAAI,CAAC,WAAW,GAAG,GAAG;;mBAEnC;gBACH,CAAC,CAAC,OAAO;aACZ;YACH,CAAC,CAAC,IAAI,CAAA;;;wBAGQ,IAAI,CAAC,YAAY;;2BAEd,IAAI,CAAC,mBAAmB;;;;+BAIpB,IAAI,CAAC,mBAAmB;;oBAEnC,IAAI,CAAC,aAAa;;;;;kBAKpB,IAAI,CAAC,mBAAmB;gBACxB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAoB,CAAC;gBAC9B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC;;aAE/B;;KAER,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,kBAAkB;QACtB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QAC9B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QAEjC,sFAAsF;QACtF,IAAI,GAAG,GAAG,QAAQ,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,YAAY,4BAA4B,CAAC;QACxF,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,mHAAmH;YACnH,+CAA+C;QACjD,CAAC;QAED,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;gBAC5B,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,gCAAgC;aAC3D,CAAC,CAAC;YACH,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAiB,CAAC;YACjD,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,GAAG,CAAC,CAAC;YACnD,IAAI,CAAC,QAAQ;gBACX,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,6CAA6C,CAAC;YACxE,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC/B,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,yBAAyB,CAAC,IAAkB;QAClD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;YAC7B,OAAO;QACT,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QAErB,oDAAoD;QACpD,IAAI,CAAC,4BAA4B,GAAG,QAAQ,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,QAAQ,2BAA2B,CAAC;QAElI,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACK,gBAAgB;QACtB,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACpC,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAEO,KAAK,CAAC,0BAA0B;QACtC,IAAI,CAAC,IAAI,CAAC,4BAA4B;YAAE,OAAO;QAE/C,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;YAC5D,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAiB,CAAC;YACjD,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,CAAC;QAChD,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,GAAG,CAAC,CAAC;YAC5D,IAAI,CAAC,QAAQ;gBACX,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,sCAAsC,CAAC;YACjE,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC/B,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACK,kCAAkC,CAAC,QAAsB;QAC/D,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;YAC7B,OAAO;QACT,CAAC;QAED,IAAI,OAAO,QAAQ,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC1C,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACvC,CAAC;QAED,qCAAqC;QACrC,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,GAAG,GAAG,EAAE,CAAC;YAC7D,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;QAED,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAC7C,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;YAC5C,0BAA0B;YAC1B,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAClC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;CACF,CAAA;AAxP6B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;qDAA0B;AAKzB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;mDAAuB;AAMtB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;oDAAgC;AAM/B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;oDAAgC;AAM1C;IAAhB,KAAK,EAAE;kDAAyC;AAKhC;IAAhB,KAAK,EAAE;+CAAsC;AAK7B;IAAhB,KAAK,EAAE;mDAA0C;AAKjC;IAAhB,KAAK,EAAE;0DAAqC;AAK5B;IAAhB,KAAK,EAAE;mEAA0D;AAKjD;IAAhB,KAAK,EAAE;+CAAsC;AApDnC,aAAa;IADzB,aAAa,CAAC,iBAAiB,CAAC;GACpB,aAAa,CA4PzB","sourcesContent":["import { LitElement, html, css, nothing } from \"lit\";\nimport { property, state, customElement } from \"lit/decorators.js\";\nimport \"@material/web/button/filled-button.js\";\nimport \"@material/web/button/outlined-button.js\";\nimport \"@material/web/progress/linear-progress.js\";\nimport { YpBaseElement } from \"../common/yp-base-element.js\";\n\n/**\n * <yp-xls-download>\n * This component:\n *  - Accepts a collectionType (\"group\" or \"community\" etc.) and a collectionId\n *  - Calls /api/[type]/[id]/xls/start_report_creation to begin the job\n *  - Polls /api/[type]/[id]/[jobId]/report_creation_progress for status\n *  - Shows a simple button with spinner/progress bar and final \"download\" link\n *\n * Usage example:\n *\n *   <yp-xls-download\n *     collectionType=\"group\"\n *     .collectionId=\"${123}\"\n *     language=\"en\"\n *   ></yp-xls-download>\n */\n@customElement(\"yp-xls-download\")\nexport class YpXlsDownload extends YpBaseElement {\n  /**\n   * \"group\" or \"community\" or whichever your server expects.\n   */\n  @property({ type: String }) collectionType = \"group\";\n\n  /**\n   * The numeric ID of your group or community.\n   */\n  @property({ type: Number }) collectionId!: number;\n\n  /**\n   * Whether to show the button label for generating XLS.\n   * You might remove this or set it dynamically via i18n, etc.\n   */\n  @property({ type: String }) generateLabel = \"Generate XLS\";\n\n  /**\n   * If you want to show a final \"Download XLS\" button text.\n   * Also could be i18n.\n   */\n  @property({ type: String }) downloadLabel = \"Download XLS\";\n\n  /**\n   * The progress of the XLS creation (0-100).\n   * While this is set and < 100, we show a linear progress bar.\n   */\n  @state() private xlsProgress: number | undefined;\n\n  /**\n   * Error message from server or local fetch error.\n   */\n  @state() private xlsError: string | undefined;\n\n  /**\n   * The final XLS URL to allow user to download from.\n   */\n  @state() private xlsReportUrl: string | undefined;\n\n  /**\n   * If the link has expired after ~1 hour or we want to block future downloads.\n   */\n  @state() private xlsDownloadDisabled = false;\n\n  /**\n   * We build this URL for polling, e.g. `/api/groups/123/456/report_creation_progress`.\n   */\n  @state() private xlsReportCreationProgressUrl: string | undefined;\n\n  /**\n   * The job ID we get from the server after starting the generation.\n   */\n  @state() private xlsJobId: number | undefined;\n\n  static override get styles() {\n    return [\n      super.styles,\n      //TODO: Fix this hack below\n      css`\n        :host {\n          display: block;\n          text-align: center;\n          margin: 16px auto;\n        }\n        .error {\n          color: var(--md-sys-color-error, red);\n          margin-bottom: 8px;\n        }\n        .infoText {\n          font-size: 0.9em;\n          margin-top: 8px;\n          color: var(--md-sys-color-on-surface-variant, #555);\n        }\n        md-linear-progress {\n          margin: 8px;\n        }\n        .expiredText {\n          color: var(--md-sys-color-on-surface-variant, #888);\n          font-style: italic;\n        }\n\n        .xlsDownloadContainer {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          max-width: 200px\n        }\n      `,\n    ];\n  }\n\n  override render() {\n    return html`\n      <div class=\"xlsDownloadContainer\">\n        <!-- Show any error -->\n        <div class=\"error\" ?hidden=\"${!this.xlsError}\">${this.xlsError}</div>\n\n        <!-- If we do NOT have a final report URL yet, show a \"Generate XLS\" button & optional spinner -->\n        ${!this.xlsReportUrl\n          ? html`\n              <md-outlined-button\n                @click=\"${this.startXlsGeneration}\"\n                ?disabled=\"${this.xlsProgress !== undefined &&\n                this.xlsProgress < 100}\"\n              >\n                ${this.xlsProgress === undefined\n                  ? this.generateLabel\n                  : this.t(\"generatingXls\")}\n              </md-outlined-button>\n\n              <!-- If we have a numeric progress, show a linear progress bar -->\n              ${this.xlsProgress !== undefined && this.xlsProgress < 100\n                ? html`\n                    <md-linear-progress\n                      .value=\"${this.xlsProgress / 100}\"\n                    ></md-linear-progress>\n                  `\n                : nothing}\n            `\n          : html`\n              <!-- If we have the final report link, show a \"Download XLS\" button -->\n              <a\n                href=\"${this.xlsReportUrl}\"\n                target=\"_blank\"\n                ?hidden=\"${this.xlsDownloadDisabled}\"\n              >\n                <md-filled-button\n                  id=\"downloadXlsButton\"\n                  ?disabled=\"${this.xlsDownloadDisabled}\"\n                >\n                  ${this.downloadLabel}\n                </md-filled-button>\n              </a>\n\n              <div class=\"infoText\" hidden>\n                ${this.xlsDownloadDisabled\n                  ? this.t(\"downloadHasExpired\")\n                  : this.t(\"reportLinkInfo\")}\n              </div>\n            `}\n      </div>\n    `;\n  }\n\n  /**\n   * Fired when user clicks \"Generate XLS\" button.\n   * 1) We'll PUT to start the job\n   * 2) If success, store jobId, set progress ~5%\n   * 3) Start polling the status\n   */\n  async startXlsGeneration() {\n    this.xlsProgress = 0;\n    this.xlsError = undefined;\n    this.xlsReportUrl = undefined;\n    this.xlsDownloadDisabled = false;\n\n    // Build the \"start creation\" endpoint, e.g. /api/groups/123/xls/start_report_creation\n    let url = `/api/${this.collectionType}s/${this.collectionId}/xls/start_report_creation`;\n    if (this.language) {\n      //TODO: Look into this if needed but should not happen by default for large documents due to google translate costs\n      //url += `?translateLanguage=${this.language}`;\n    }\n\n    try {\n      const resp = await fetch(url, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({}), // if your server needs any data\n      });\n      const data = (await resp.json()) as YpReportData;\n      this._startXlsCreationResponse(data);\n    } catch (err: any) {\n      console.error(\"Error starting XLS creation:\", err);\n      this.xlsError =\n        (err && err.message) || \"Error starting XLS creation (network issue)\";\n      this.xlsProgress = undefined;\n    }\n  }\n\n  /**\n   * Called when the server acknowledges the job was queued/started.\n   * We store the jobId, set initial progress, build the poll URL, start polling.\n   */\n  private _startXlsCreationResponse(data: YpReportData) {\n    if (!data || !data.jobId) {\n      this.xlsError = this.t(\"jobIdNotReturned\");\n      this.xlsProgress = undefined;\n      return;\n    }\n    this.xlsJobId = data.jobId;\n    this.xlsProgress = 5;\n\n    // e.g. /api/groups/123/789/report_creation_progress\n    this.xlsReportCreationProgressUrl = `/api/${this.collectionType}s/${this.collectionId}/${this.xlsJobId}/report_creation_progress`;\n\n    this._pollXlsProgress();\n  }\n\n  /**\n   * Poll the server every second for progress until either error, done, or progress=100.\n   */\n  private _pollXlsProgress() {\n    setTimeout(() => {\n      this._reportXlsCreationProgress();\n    }, 1000);\n  }\n\n  private async _reportXlsCreationProgress() {\n    if (!this.xlsReportCreationProgressUrl) return;\n\n    try {\n      const resp = await fetch(this.xlsReportCreationProgressUrl);\n      const data = (await resp.json()) as YpReportData;\n      this._xlsReportCreationProgressResponse(data);\n    } catch (err: any) {\n      console.error(\"Error checking XLS creation progress:\", err);\n      this.xlsError =\n        (err && err.message) || \"Error checking XLS creation progress\";\n      this.xlsProgress = undefined;\n    }\n  }\n\n  /**\n   * - If progress < 100, poll again\n   * - If error, show it\n   * - If we have a final reportUrl, show \"Download\" button\n   * - Expire the link after 59 minutes\n   */\n  private _xlsReportCreationProgressResponse(response: YpReportData) {\n    if (response.error) {\n      this.xlsError = this.t(response.error);\n      this.xlsProgress = undefined;\n      return;\n    }\n\n    if (typeof response.progress === \"number\") {\n      this.xlsProgress = response.progress;\n    }\n\n    // Keep polling if < 100 and no error\n    if (this.xlsProgress !== undefined && this.xlsProgress < 100) {\n      this._pollXlsProgress();\n    }\n\n    if (response.data && response.data.reportUrl) {\n      this.xlsReportUrl = response.data.reportUrl;\n      // Expire after 59 minutes\n      setTimeout(() => {\n        this.xlsDownloadDisabled = true;\n      }, 59 * 60 * 1000);\n    }\n  }\n}\n"]}