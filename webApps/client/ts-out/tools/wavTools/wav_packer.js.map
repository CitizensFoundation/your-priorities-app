{"version":3,"file":"wav_packer.js","sourceRoot":"","sources":["../../../src/tools/wavTools/wav_packer.ts"],"names":[],"mappings":"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","sourcesContent":["// From https://github.com/openai/openai-realtime-console/blob/main/src/lib/wavtools/lib/wav_packer.js\n\nexport interface WavPackerAudioType {\n  blob: Blob;\n  url: string;\n  channelCount: number;\n  sampleRate: number;\n  duration: number;\n}\n\ninterface AudioData {\n  bitsPerSample: number;\n  channels: Float32Array[];\n  data: Int16Array;\n}\n\n/**\n * Utility class for assembling PCM16 \"audio/wav\" data\n */\nexport class WavPacker {\n  /**\n   * Converts Float32Array of amplitude data to ArrayBuffer in Int16Array format\n   */\n  static floatTo16BitPCM(float32Array: Float32Array): ArrayBuffer {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      const s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  }\n\n  /**\n   * Concatenates two ArrayBuffers\n   */\n  static mergeBuffers(leftBuffer: ArrayBuffer, rightBuffer: ArrayBuffer): ArrayBuffer {\n    const tmpArray = new Uint8Array(\n      leftBuffer.byteLength + rightBuffer.byteLength\n    );\n    tmpArray.set(new Uint8Array(leftBuffer), 0);\n    tmpArray.set(new Uint8Array(rightBuffer), leftBuffer.byteLength);\n    return tmpArray.buffer;\n  }\n\n  /**\n   * Packs data into an Int16 format\n   * @private\n   * @param size - 0 = 1x Int16, 1 = 2x Int16\n   * @param arg - value to pack\n   */\n  private _packData(size: 0 | 1, arg: number): Uint8Array {\n    return [\n      new Uint8Array([arg, arg >> 8]),\n      new Uint8Array([arg, arg >> 8, arg >> 16, arg >> 24]),\n    ][size];\n  }\n\n  /**\n   * Packs audio into \"audio/wav\" Blob\n   */\n  pack(sampleRate: number, audio: AudioData): WavPackerAudioType {\n    if (!audio?.bitsPerSample) {\n      throw new Error('Missing \"bitsPerSample\"');\n    } else if (!audio?.channels) {\n      throw new Error('Missing \"channels\"');\n    } else if (!audio?.data) {\n      throw new Error('Missing \"data\"');\n    }\n\n    const { bitsPerSample, channels, data } = audio;\n    const output: (string | Uint8Array | Int16Array)[] = [\n      // Header\n      'RIFF',\n      this._packData(\n        1,\n        4 + (8 + 24) /* chunk 1 length */ + (8 + 8) /* chunk 2 length */\n      ), // Length\n      'WAVE',\n      // chunk 1\n      'fmt ', // Sub-chunk identifier\n      this._packData(1, 16), // Chunk length\n      this._packData(0, 1), // Audio format (1 is linear quantization)\n      this._packData(0, channels.length),\n      this._packData(1, sampleRate),\n      this._packData(1, (sampleRate * channels.length * bitsPerSample) / 8), // Byte rate\n      this._packData(0, (channels.length * bitsPerSample) / 8),\n      this._packData(0, bitsPerSample),\n      // chunk 2\n      'data', // Sub-chunk identifier\n      this._packData(\n        1,\n        (channels[0].length * channels.length * bitsPerSample) / 8\n      ), // Chunk length\n      data,\n    ];\n\n    const blob = new Blob(output, { type: 'audio/mpeg' });\n    const url = URL.createObjectURL(blob);\n\n    return {\n      blob,\n      url,\n      channelCount: channels.length,\n      sampleRate,\n      duration: data.byteLength / (channels.length * sampleRate * 2),\n    };\n  }\n}\n\n// Adding to global scope if needed\ndeclare global {\n  interface Window {\n    WavPacker: typeof WavPacker;\n  }\n}\n\nif (typeof globalThis !== 'undefined') {\n  (globalThis as any).WavPacker = WavPacker;\n}"]}