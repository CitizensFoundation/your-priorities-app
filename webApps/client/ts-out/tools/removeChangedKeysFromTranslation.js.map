{"version":3,"file":"removeChangedKeysFromTranslation.js","sourceRoot":"","sources":["../../src/tools/removeChangedKeysFromTranslation.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,SAAS,EAAE,MAAM,MAAM,CAAC;AAEjC,MAAM,eAAe,GAAG,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAC/C,MAAM,gBAAgB,GAAG,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AAMjD,MAAM,0BAA0B;IAAhC;QACE,eAAU,GAAG,WAAW,CAAC;QACzB,mBAAc,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAC1C,iBAAY,GAAG;YACb,UAAU;YACV,SAAS;YACT,UAAU;YACV,SAAS;YACT,UAAU;YACV,WAAW;YACX,SAAS;YACT,QAAQ;YACR,aAAa;SACd,CAAC;IAsCJ,CAAC;IApCC,KAAK,CAAC,UAAU;QACd,MAAM,UAAU,GAAG,EAAE;aAClB,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;aAC5B,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAExH,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE,CAAC;YACnC,OAAO,CAAC,GAAG,CAAC,sBAAsB,SAAS,EAAE,CAAC,CAAC;YAC/C,MAAM,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC;YACtF,IAAI,WAAW,GAAgB,MAAM,IAAI,CAAC,YAAY,CAAc,mBAAmB,CAAC,CAAC;YAEzF,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAE7E,MAAM,gBAAgB,CAAC,mBAAmB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAClF,OAAO,CAAC,GAAG,CAAC,2BAA2B,SAAS,EAAE,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,YAAY,CAAI,QAAgB;QAC5C,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC5D,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAM,CAAC;IACtC,CAAC;IAEO,yBAAyB,CAAC,WAAwB,EAAE,YAAsB;QAChF,MAAM,qBAAqB,GAAG,CAAC,GAAQ,EAAE,EAAE;YACzC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBAC/B,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC/B,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;gBAClB,CAAC;qBAAM,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE,CAAC;oBACxC,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,qBAAqB,CAAC,WAAW,CAAC,CAAC;QACnC,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AAED,CAAC,KAAK,IAAI,EAAE;IACV,MAAM,OAAO,GAAG,IAAI,0BAA0B,EAAE,CAAC;IACjD,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;AAC7B,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { promisify } from 'util';\n\nconst readFilePromise = promisify(fs.readFile);\nconst writeFilePromise = promisify(fs.writeFile);\n\ninterface Translation {\n  [key: string]: string | Translation;\n}\n\nclass RemoveKeysFromTranslations {\n  localesDir = './locales';\n  excludeLocales = ['en', 'en_gb', 'en_ca'];\n  keysToRemove = [\n    'facebook',\n    'twitter',\n    'linkedin',\n    'adwords',\n    'snapchat',\n    'instagram',\n    'youtube',\n    'tiktok',\n    'allOurIdeas'\n  ];\n\n  async removeKeys() {\n    const localeDirs = fs\n      .readdirSync(this.localesDir)\n      .filter((file) => fs.statSync(path.join(this.localesDir, file)).isDirectory() && !this.excludeLocales.includes(file));\n\n    for (const localeDir of localeDirs) {\n      console.log(`Processing locale: ${localeDir}`);\n      const translationFilePath = path.join(this.localesDir, localeDir, 'translation.json');\n      let translation: Translation = await this.loadJsonFile<Translation>(translationFilePath);\n\n      translation = this.removeKeysFromTranslation(translation, this.keysToRemove);\n\n      await writeFilePromise(translationFilePath, JSON.stringify(translation, null, 2));\n      console.log(`Updated translation for ${localeDir}`);\n    }\n  }\n\n  private async loadJsonFile<T>(filePath: string): Promise<T> {\n    const fileContent = await readFilePromise(filePath, 'utf8');\n    return JSON.parse(fileContent) as T;\n  }\n\n  private removeKeysFromTranslation(translation: Translation, keysToRemove: string[]): Translation {\n    const removeKeysRecursively = (obj: any) => {\n      Object.keys(obj).forEach((key) => {\n        if (keysToRemove.includes(key)) {\n          delete obj[key];\n        } else if (typeof obj[key] === 'object') {\n          removeKeysRecursively(obj[key]);\n        }\n      });\n    };\n\n    removeKeysRecursively(translation);\n    return translation;\n  }\n}\n\n(async () => {\n  const remover = new RemoveKeysFromTranslations();\n  await remover.removeKeys();\n})();\n"]}