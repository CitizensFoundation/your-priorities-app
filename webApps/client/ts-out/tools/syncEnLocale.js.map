{"version":3,"file":"syncEnLocale.js","sourceRoot":"","sources":["../../src/tools/syncEnLocale.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as glob from 'glob';\n\n// Define paths\nconst srcDirectory = './src/';\nconst translationFilePath = './locales/en/translation.json';\nconst outputFilePath = '/tmp/translation.json';\n\n\n// Function to recursively find .js and .ts files\nfunction findFiles(directory: string, extensionRegex: RegExp, foundFiles: string[] = []): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n        fs.readdir(directory, { withFileTypes: true }, (err, files) => {\n            if (err) {\n                return reject(err);\n            }\n\n            // Process each file or directory\n            const promises = files.map(file => {\n                const filePath = path.join(directory, file.name);\n                if (file.isDirectory()) {\n                    // Recurse into subdirectories\n                    return findFiles(filePath, extensionRegex, foundFiles);\n                } else if (extensionRegex.test(file.name)) {\n                    // Add file if it matches .js or .ts\n                    foundFiles.push(filePath);\n                }\n                return Promise.resolve();\n            });\n\n            // Wait for all files and subdirectories to be processed\n            Promise.all(promises).then(() => resolve(foundFiles)).catch(reject);\n        });\n    });\n}\n\n// Function to read file content\nasync function readFileContent(filePath: string): Promise<string> {\n    return fs.promises.readFile(filePath, 'utf8');\n}\n\n// Function to extract translation keys using regex\nfunction extractTranslationKeys(fileContent: string): string[] {\n    const regex = /this\\.t\\(['\"`](.*?)['\"`]\\)/g;\n    const keys = [];\n    let match;\n\n    while ((match = regex.exec(fileContent)) !== null) {\n        keys.push(match[1]);\n    }\n\n    return keys;\n}\n\n// Function to read and parse the translation file\nasync function readTranslationFile(filePath: string): Promise<any> {\n    const content = await fs.promises.readFile(filePath, 'utf8');\n    return JSON.parse(content);\n}\n\n// Function to save the updated translation file\nasync function saveUpdatedTranslationFile(filePath: string, content: any): Promise<void> {\n    await fs.promises.writeFile(filePath, JSON.stringify(content, null, 2));\n}\n\n// Function to deeply check and remove unused keys, and count changes\nfunction updateTranslations(usedKeys: string[], translations: any): { updatedTranslations: any, deletedCount: number, newCount: number } {\n    const result = {};\n    let deletedCount = 0;\n    let newCount = 0;\n\n    const checkAndUpdate = (keys: string[], current: any, currentResult: any, path: string) => {\n        Object.keys(current).forEach(key => {\n            const newPath = path ? `${path}.${key}` : key;\n            if (keys.includes(newPath)) {\n                currentResult[key] = current[key];\n            } else {\n                deletedCount++;\n            }\n        });\n\n        keys.forEach(key => {\n            if (!current[key]) {\n                newCount++;\n                // Assuming you want to add new keys with a placeholder value\n                currentResult[key] = `${key}`;\n            }\n        });\n    };\n\n    checkAndUpdate(usedKeys, translations, result, '');\n\n    return { updatedTranslations: result, deletedCount, newCount };\n}\n\n// Main function to process translations\nasync function processTranslations() {\n    try {\n        const srcDirectory = './src';\n        const extensionsRegex = /\\.(js|ts)$/;\n        let files = await findFiles(srcDirectory, extensionsRegex);\n        console.log(`Found ${files.length} files.`);\n        let moreFile = await findFiles(\"../old/clientApp/src/\",  /\\.(html)$/);\n        console.log(`Found more ${moreFile.length} files.`)\n        files = files.concat(moreFile);\n        const translationKeys = new Set<string>();\n        const translations = await readTranslationFile(translationFilePath);\n\n        for (const file of files) {\n            const content = await readFileContent(file);\n            const keys = extractTranslationKeys(content);\n            keys.forEach(key => translationKeys.add(key));\n        }\n\n        const { updatedTranslations, deletedCount, newCount } = updateTranslations(Array.from(translationKeys), translations);\n\n        await saveUpdatedTranslationFile(outputFilePath, updatedTranslations);\n        console.log(`Translation file has been updated. New tokens: ${newCount}, Deleted tokens: ${deletedCount}`);\n    } catch (error) {\n        console.error('Error processing translations:', error);\n    }\n}\n\n// Execute the main function\nprocessTranslations();\n"]}