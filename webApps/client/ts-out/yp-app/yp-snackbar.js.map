{"version":3,"file":"yp-snackbar.js","sourceRoot":"","sources":["../../src/yp-app/yp-snackbar.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAc,IAAI,EAAE,GAAG,EAA6B,MAAM,KAAK,CAAC;AACvE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAGnD,IAAM,UAAU,GAAhB,MAAM,UAAW,SAAQ,aAAa;IAAtC;;QAEL,SAAI,GAAG,KAAK,CAAC;QAGb,cAAS,GAAG,EAAE,CAAC;QAGf,cAAS,GAAG,IAAI,CAAC,CAAC,oCAAoC;IAkGxD,CAAC;IAhGC,MAAM,KAAc,MAAM;QACxB,OAAO;YACL,KAAK,CAAC,MAAM;YACZ,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2DF;SACF,CAAC;IACJ,CAAC;IAED,4CAA4C;IAC5C,YAAY;QACV,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;YACvB,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;gBAClB,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChD,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAEQ,OAAO,CAAC,iBAAyD;QACxE,IAAI,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YAC/C,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAED,aAAa;QACX,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChD,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;qCACsB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,gBAAgB;gCACtC,IAAI,CAAC,SAAS;uCACP,IAAI,CAAC,aAAa;;;KAGpD,CAAC;IACJ,CAAC;CACF,CAAA;AAxGC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;wCAC9B;AAGb;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;6CACZ;AAGf;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;6CACV;AARN,UAAU;IADtB,aAAa,CAAC,aAAa,CAAC;GAChB,UAAU,CA0GtB","sourcesContent":["import { LitElement, html, css, CSSResult, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { YpBaseElement } from \"../common/yp-base-element\";\n\n@customElement(\"yp-snackbar\")\nexport class YpSnackbar extends YpBaseElement {\n  @property({ type: Boolean, reflect: true })\n  open = false;\n\n  @property({ type: String })\n  labelText = \"\";\n\n  @property({ type: Number })\n  timeoutMs = 5000; // Default duration for the snackbar\n\n  static override get styles() {\n    return [\n      super.styles,\n      css`\n        :host {\n          --snackbar-background-color: var(\n            --md-sys-color-inverse-surface,\n            #323232\n          );\n          --snackbar-text-color: var(--md-sys-color-on-inverse-surface, white);\n          --snackbar-action-color: var(--md-sys-color-primary, #bb86fc);\n          --snackbar-elevation: var(--md-sys-elevation-level3, 6px);\n          --snackbar-border-radius: var(--md-sys-shape-corner-extra-small, 4px);\n          --snackbar-padding: 16px;\n          --snackbar-margin: 8px;\n        }\n\n        .snackbar {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          min-width: 288px;\n          max-width: 568px;\n          padding: var(--snackbar-padding);\n          background-color: var(--snackbar-background-color);\n          color: var(--snackbar-text-color);\n          box-shadow: var(--snackbar-elevation);\n          border-radius: var(--snackbar-border-radius);\n          margin: var(--snackbar-margin);\n          transform: translateY(100%);\n          transition: transform 0.3s ease-in-out;\n          position: fixed;\n          bottom: 0;\n          left: 50%;\n          transform: translate(-50%, 100%);\n          visibility: hidden;\n        }\n\n        :host([open]) .snackbar {\n          transform: translate(-50%, -10px);\n          visibility: visible;\n        }\n\n        .message {\n          margin-right: var(--snackbar-padding);\n        }\n\n        .action {\n          color: var(--snackbar-action-color);\n          cursor: pointer;\n          text-transform: uppercase;\n          font-weight: bold;\n        }\n\n        .close-icon {\n          cursor: pointer;\n          visibility: hidden;\n        }\n\n        :host([dismissible]) .close-icon {\n          visibility: visible;\n        }\n      `,\n    ];\n  }\n\n  // Close the snackbar after a specified time\n  showSnackbar() {\n    if (this.timeoutMs > 0) {\n      setTimeout(() => {\n        this.open = false;\n        this.dispatchEvent(new CustomEvent(\"closed\"));\n      }, this.timeoutMs);\n    }\n  }\n\n  override updated(changedProperties: Map<string | number | symbol, unknown>) {\n    if (changedProperties.has(\"open\") && this.open) {\n      this.showSnackbar();\n    }\n  }\n\n  closeSnackbar() {\n    this.open = false;\n    this.dispatchEvent(new CustomEvent(\"closed\"));\n  }\n\n  override render() {\n    return html`\n      <div class=\"snackbar\" style=\"${this.open ? \"\" : \"display: none;\"}\">\n        <span class=\"message\">${this.labelText}</span>\n        <slot name=\"dismiss\" @click=\"${this.closeSnackbar}\"></slot>\n        <slot name=\"action\"></slot>\n      </div>\n    `;\n  }\n}\n"]}