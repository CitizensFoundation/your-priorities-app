{"version":3,"file":"ConverationBackup.js","sourceRoot":"","sources":["../../../src/yp-avatars/hey-gen/ConverationBackup.ts"],"names":[],"mappings":"AAeA,MAAM,OAAO,yBAAyB;IAKpC,YAAoB,MAAgC;QAAhC,WAAM,GAAN,MAAM,CAA0B;QAJ5C,kBAAa,GAA0B,EAAE,CAAC;QAC1C,mBAAc,GAAkB,IAAI,CAAC;QACrC,aAAQ,GAAG,KAAK,CAAC;QAGvB,mDAAmD;QACnD,IAAI,MAAM,CAAC,aAAa,EAAE,CAAC;YACzB,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE;gBAC5C,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAEM,UAAU,CAAC,OAA4B;QAC5C,IAAI,CAAC,IAAI,CAAC,QAAQ;YAAE,OAAO;QAE3B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEjC,gDAAgD;QAChD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAEtB,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACxB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC1C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC7B,CAAC;QAED,8BAA8B;QAC9B,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC1B,CAAC;IAEO,KAAK,CAAC,YAAY;QACxB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QAE5C,IAAI,CAAC;YACH,MAAM,OAAO,GAAG;gBACd,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC;gBACjC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;aACjC,CAAC;YAEF,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;gBACtC,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;oBAClC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO;iBACvB;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aAC9B,CAAC,CAAC;YAEH,qCAAqC;YACrC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,2CAA2C;QAC7C,CAAC;IACH,CAAC;CACF","sourcesContent":["// conversationBackup.ts\nexport interface ConversationBackupConfig {\n  backupEndpoint: string;\n  batchInterval?: number; // How often to send messages (optional)\n  headers?: Record<string, string>;\n  sessionId: string;\n}\n\nexport interface ConversationMessage {\n  type: 'avatar' | 'user';\n  message: string;\n  timestamp: number;\n  taskId?: string;\n}\n\nexport class ConversationBackupManager {\n  private messageBuffer: ConversationMessage[] = [];\n  private sendIntervalId: number | null = null;\n  private isActive = false;\n\n  constructor(private config: ConversationBackupConfig) {\n    // Set up periodic sending if interval is specified\n    if (config.batchInterval) {\n      this.sendIntervalId = window.setInterval(() => {\n        this.sendMessages();\n      }, config.batchInterval);\n    }\n    this.isActive = true;\n  }\n\n  public addMessage(message: ConversationMessage): void {\n    if (!this.isActive) return;\n\n    this.messageBuffer.push(message);\n\n    // If no batch interval is set, send immediately\n    if (!this.config.batchInterval) {\n      this.sendMessages();\n    }\n  }\n\n  public stop(): void {\n    this.isActive = false;\n\n    if (this.sendIntervalId) {\n      window.clearInterval(this.sendIntervalId);\n      this.sendIntervalId = null;\n    }\n\n    // Send any remaining messages\n    this.sendMessages();\n    this.messageBuffer = [];\n  }\n\n  private async sendMessages(): Promise<void> {\n    if (this.messageBuffer.length === 0) return;\n\n    try {\n      const payload = {\n        timestamp: Date.now(),\n        messages: [...this.messageBuffer],\n        sessionId: this.config.sessionId\n      };\n\n      await fetch(this.config.backupEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.config.headers\n        },\n        body: JSON.stringify(payload)\n      });\n\n      // Clear buffer after successful send\n      this.messageBuffer = [];\n    } catch (error) {\n      console.error('Error sending conversation backup:', error);\n      // Keep messages in buffer in case of error\n    }\n  }\n}"]}