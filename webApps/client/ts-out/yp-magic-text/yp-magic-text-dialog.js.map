{"version":3,"file":"yp-magic-text-dialog.js","sourceRoot":"","sources":["../../src/yp-magic-text/yp-magic-text-dialog.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAW,MAAM,KAAK,CAAC;AACzC,OAAO,EAAY,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAG5D,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAE3D,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAEjD,OAAO,gCAAgC,CAAC;AAGjC,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,WAAW;IAChD,MAAM,KAAc,MAAM;QACxB,OAAO;YACL,KAAK,CAAC,MAAM;YACZ,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4BF;SACF,CAAC;IACJ,CAAC;IAEQ,MAAM;QACb,OAAO,IAAI,CAAA;2CAC4B,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC;;YAEnD,IAAI,CAAC,YAAY;YACjB,CAAC,CAAC,IAAI,CAAA,SAAS,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS;YACrD,CAAC,CAAC,IAAI,CAAA,SAAS,IAAI,CAAC,OAAO,SAAS;;;;oBAI5B,GAAG,EAAE,CAAC,CAAE,IAAI,CAAC,EAAE,CAAC,SAAS,CAAc,CAAC,IAAI,GAAG,KAAK,CAAC;;YAE7D,IAAI,CAAC,eAAe;;;KAG3B,CAAC;IACJ,CAAC;IAEQ,kBAAkB;QACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC;IAED,KAAK,CAAC,IAAI,CACR,OAAe,EACf,SAAiB,EACjB,OAAe,EACf,YAAoB,EACpB,QAAgB,EAChB,eAAuB,EACvB,eAAuB,EACvB,yBAAiC,EACjC,YAAY,GAAG,KAAK,EACpB,kBAAkB,GAAG,KAAK;QAE1B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,MAAM,IAAI,CAAC,cAAc,CAAC;QACzB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAc,CAAC,IAAI,GAAG,IAAI,CAAC;QAC7C,UAAU,CAAC,GAAG,EAAE;YACd,0BAA0B;YAC1B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3B,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;CACF,CAAA;AAxFY,iBAAiB;IAD7B,aAAa,CAAC,sBAAsB,CAAC;GACzB,iBAAiB,CAwF7B","sourcesContent":["import { html, css, nothing } from \"lit\";\nimport { property, customElement } from \"lit/decorators.js\";\n\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { unsafeHTML } from \"lit/directives/unsafe-html.js\";\n\nimport { YpMagicText } from \"./yp-magic-text.js\";\nimport { MdDialog } from \"@material/web/dialog/dialog.js\";\nimport \"@material/web/dialog/dialog.js\";\n\n@customElement(\"yp-magic-text-dialog\")\nexport class YpMagicTextDialog extends YpMagicText {\n  static override get styles() {\n    return [\n      super.styles,\n      css`\n        :host {\n          display: block;\n        }\n\n        #dialog {\n          max-width: 50%;\n        }\n\n        @media (max-width: 1100px) {\n          #dialog {\n            max-width: 80%;\n          }\n        }\n\n        @media (max-width: 600px) {\n          #dialog {\n            max-width: 100%;\n          }\n\n          md-dialog {\n            padding: 0;\n            margin: 0;\n          }\n        }\n\n        .buttons {\n        }\n      `,\n    ];\n  }\n\n  override render() {\n    return html`\n      <md-dialog id=\"dialog\" aria-label=\"${this.t(\"textDialog\")}\">\n        <div slot=\"content\">\n          ${this.finalContent\n            ? html` <div>${unsafeHTML(this.finalContent)}</div> `\n            : html` <div>${this.content}</div> `}\n        </div>\n        <md-text-button\n          slot=\"actions\"\n          @click=\"${() => ((this.$$(\"#dialog\") as MdDialog).open = false)}\"\n        >\n          ${this.closeDialogText}\n        </md-text-button>\n      </md-dialog>\n    `;\n  }\n\n  override subClassProcessing() {\n    this.processedContent = this.processedContent?.replace(/\\n/g, \"<br />\");\n  }\n\n  async open(\n    content: string,\n    contentId: number,\n    extraId: number,\n    additionalId: number,\n    textType: string,\n    contentLanguage: string,\n    closeDialogText: string,\n    structuredQuestionsConfig: string,\n    skipSanitize = false,\n    disableTranslation = false\n  ) {\n    this.skipSanitize = skipSanitize;\n    this.isDialog = true;\n    this.content = content;\n    this.contentId = contentId;\n    this.extraId = extraId;\n    this.additionalId = additionalId;\n    this.textType = textType;\n    this.contentLanguage = contentLanguage;\n    this.structuredQuestionsConfig = structuredQuestionsConfig;\n    this.closeDialogText = closeDialogText;\n    this.disableTranslation = disableTranslation;\n    await this.updateComplete;\n    (this.$$(\"#dialog\") as MdDialog).open = true;\n    setTimeout(() => {\n      //TODO: What to fire here?\n      this.fire(\"iron-resize\");\n    }, 50);\n  }\n}\n"]}