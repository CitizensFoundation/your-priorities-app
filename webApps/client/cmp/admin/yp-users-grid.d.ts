import { TemplateResult } from "lit";
import { YpBaseElement } from "../common/yp-base-element.js";
import "@vaadin/vaadin-grid/vaadin-grid.js";
import "@material/web/dialog/dialog.js";
import "@material/web/list/list-item.js";
import "@material/web/list/list.js";
import "@material/web/button/filled-button.js";
import "@material/web/menu/menu.js";
import "@material/web/menu/menu-item.js";
import "@material/web/iconbutton/icon-button.js";
import "@material/web/progress/circular-progress.js";
import "@material/web/textfield/outlined-text-field.js";
import "@material/web/radio/radio.js";
import "@vaadin/grid/vaadin-grid.js";
import "@vaadin/grid/vaadin-grid-selection-column.js";
import "@vaadin/grid/vaadin-grid-filter-column.js";
import "@vaadin/grid/vaadin-grid-sort-column.js";
import { GridColumn } from "@vaadin/vaadin-grid/src/vaadin-grid-column";
export declare class YpUsersGrid extends YpBaseElement {
    addAdminEmail: HTMLInputElement | undefined;
    inviteUserEmail: HTMLInputElement | undefined;
    headerText: string | undefined;
    users: Array<YpUserData> | undefined;
    groupId: number | undefined;
    communityId: number | undefined;
    domainId: number | undefined;
    adminUsers: boolean;
    selected: YpUserData | undefined;
    modelType: string | undefined;
    availableOrganizations: Array<YpOrganizationData> | undefined;
    userIdForSelectingOrganization: number | undefined;
    selectedUsers: Array<YpUserData> | undefined;
    selectedUsersCount: number;
    selectedUsersEmpty: boolean;
    selectedUserIds: Array<number> | undefined;
    selectedUserId: number | undefined;
    collectionName: string;
    usersCountText: string | undefined;
    showReload: boolean;
    forceSpinner: boolean;
    lastFethedId: number | undefined;
    private gridElement?;
    inviteType: string;
    resizeTimeout: any | undefined;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    static get styles(): any[];
    renderSelectionHeader(root: HTMLElement, column?: GridColumn | undefined): void;
    selectionRenderer(root: HTMLElement, column: any, rowData: any): void;
    _reloadFromButton(): void;
    render(): TemplateResult<1>;
    get spinnerActive(): boolean;
    _generateRequest(id?: number | undefined): Promise<void>;
    private _ajaxError;
    constructor(collectionName: string);
    connectedCallback(): void;
    private _reload;
    private _resizeThrottler;
    private _setGridSize;
    private _menuSelection;
    get totalUserCount(): string | null;
    private _selectedUsersChanged;
    private _userOrganizationId;
    private _userOrganizationName;
    private _availableOrganizations;
    private _addToOrganization;
    closeOrganizationDialog(): void;
    private _removeFromOrganization;
    private _selectOrganization;
    private _removeAdmin;
    _removeSelectedAdmins(event: CustomEvent): void;
    _removeAndDeleteContentSelectedUsers(event: CustomEvent): void;
    _removeSelectedUsersFromCollection(event: CustomEvent): void;
    _removeUserFromCollection(event: CustomEvent): void;
    _removeAndDeleteUserContent(event: CustomEvent): void;
    private _removeMaster;
    private _reallyRemoveSelectedAdmins;
    private _reallyRemoveAndDeleteContentSelectedUsers;
    private _reallyRemoveSelectedUsersFromCollection;
    private _reallyRemoveUserFromCollection;
    private _reallyRemoveAndDeleteUserContent;
    _setupUserIdFromEvent(event: CustomEvent): void;
    _openAllMenu(event: CustomEvent): void;
    _setSelected(event: CustomEvent): void;
    _findUserFromId(id: Number): undefined;
    _addAdmin(event: CustomEvent): Promise<void>;
    _inviteUser(event: CustomEvent): Promise<void>;
    _manyItemsResponse(showToast?: boolean): void;
    _removeAdminResponse(): void;
    _removeManyAdminResponse(): void;
    _removeManyUsersResponse(): void;
    _removeAndDeleteCompleted(): void;
    _removeAndDeleteManyCompleted(): void;
    _removeUserResponse(): void;
    _addAdminResponse(): void;
    _addOrganizationResponse(event: CustomEvent): void;
    _removeOrganizationResponse(event: CustomEvent): void;
    _inviteUserResponse(): void;
    _domainIdChanged(): void;
    _groupIdChanged(): void;
    _communityIdChanged(): void;
    _usersResponse(event: CustomEvent): void;
    setup(groupId: number | undefined, communityId: number | undefined, domainId: number | undefined, adminUsers: boolean): void;
    _reset(): void;
    _resetSelectedAndClearCache(): void;
    _setupHeaderText(): void;
}
//# sourceMappingURL=yp-users-grid.d.ts.map