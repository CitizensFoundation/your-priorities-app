{"version":3,"file":"ac-activities.test.js","sourceRoot":"","sources":["../../../src/ac-activities/test/ac-activities.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAuD,MAAM,kBAAkB,CAAC;AAGxH,OAAO,qBAAqB,CAAC;AAC7B,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAE/D,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,OAAqB,CAAC;IAC1B,IAAI,SAAc,CAAC;IAEnB,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,SAAS,GAAG,aAAa,CAAC,YAAY,EAAE,CAAC;QACzC,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;QAE/B,MAAM,QAAQ,GAAG;YACf,IAAI,EAAE,mBAAmB;YACzB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACpC,SAAS,EAAE,CAAC;YACZ,IAAI,EAAE,aAAa,CAAC,OAAO,EAAE;YAC7B,KAAK,EAAE,aAAa,CAAC,QAAQ,EAAE;YAC/B,IAAI,EAAE,aAAa,CAAC,OAAO,EAAE;SACZ,CAAC;QAEpB,MAAM,eAAe,GAAG;YACtB,EAAE,EAAE,CAAC;YACL,QAAQ,EAAE;gBACR,QAAQ,EAAE,CAAC;gBACX,SAAS,EAAE,CAAC;aACb;YACD,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,CAAC;YACX,WAAW,EAAE,WAAW;YACxB,uBAAuB,EAAE,CAAC;YAC1B,yBAAyB,EAAE,CAAC;YAC5B,cAAc,EAAE,CAAC;YACjB,KAAK,EAAE;gBACL,EAAE,EAAE,CAAC;gBACL,IAAI,EAAE,MAAM;gBACZ,YAAY,EAAE,CAAC;gBACf,cAAc,EAAE,CAAC;gBACjB,aAAa,EAAE,CAAC;gBAChB,aAAa,EAAE,CAAC;gBAChB,aAAa,EAAE;oBACb,kBAAkB,EAAE,KAAK;iBAC1B;aACF;SACY,CAAC;QAEhB,MAAM,UAAU,GAAG,CAAC,QAAQ,EAAE,EAAC,GAAG,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAC,EAAG,EAAC,GAAG,QAAQ,EAAE,EAAE,EAAE,CAAC,EAAC,CAAC,CAAC;QAC3E,MAAM,gBAAgB,GAAG,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;QAE5D,SAAS,CAAC,GAAG,CAAC,0BAA0B,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,aAAa,CAAC,eAAe,CAAC,CAAC;QACrG,SAAS,CAAC,GAAG,CAAC,+BAA+B,EAAC,gBAAgB,EAAE,aAAa,CAAC,eAAe,CAAC,CAAC;IACjG,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,KAAK,IAAG,EAAE;QACnB,qDAAqD;QACpD,MAAc,CAAC,cAAc,GAAG,SAAS,CAAC;QAE3C,OAAO,GAAG,MAAM,OAAO,CAAC,IAAI,CAAA;QACxB,aAAa,CAAC,kBAAkB,EAAE;;;;;KAKrC,CAAC,CAAC;QAEH,MAAM,QAAQ,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,QAAQ,CAAC;QACT,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,KAAK,IAAI,EAAE;QACf,SAAS,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { html, fixture, expect, aTimeout, oneEvent, elementUpdated, fixtureCleanup, nextFrame } from '@open-wc/testing';\n\nimport { AcActivities } from '../ac-activities.js';\nimport '../ac-activities.js';\nimport { YpTestHelpers } from '../../common/test/setup-app.js';\n\ndescribe('AcActivities', () => {\n  let element: AcActivities;\n  let fetchMock: any;\n\n  before(async () => {\n    fetchMock = YpTestHelpers.getFetchMock();\n    await YpTestHelpers.setupApp();\n\n    const activity = {\n      type: 'activity.post.new',\n      created_at: new Date().toISOString(),\n      domain_id: 2,\n      User: YpTestHelpers.getUser(),\n      Point: YpTestHelpers.getPoint(),\n      Post: YpTestHelpers.getPost(),\n    } as AcActivityData;\n\n    const recommendedPost = {\n      id: 1,\n      location: {\n        latitude: 2,\n        longitude: 3,\n      },\n      name: 'Robert',\n      group_id: 1,\n      description: 'Post-Test',\n      counter_endorsements_up: 2,\n      counter_endorsements_down: 4,\n      counter_points: 5,\n      Group: {\n        id: 1,\n        name: 'Alex',\n        community_id: 1,\n        counter_points: 1,\n        counter_users: 2,\n        counter_posts: 1,\n        configuration: {\n          makeMapViewDefault: false,\n        },\n      },\n    } as YpPostData;\n\n    const activities = [activity, {...activity, id: 2},  {...activity, id: 3}];\n    const recommendedPosts = [recommendedPost, recommendedPost];\n\n    fetchMock.get('/api/activities/groups/1', { activities: activities }, YpTestHelpers.fetchMockConfig);\n    fetchMock.get('/api/recommendations/groups/1',recommendedPosts, YpTestHelpers.fetchMockConfig);\n  });\n\n  beforeEach(async() => {\n    //TODO: Remove this hack when LitVirtualizer is ready\n    (window as any).ResizeObserver = undefined;\n\n    element = await fixture(html`\n      ${YpTestHelpers.renderCommonHeader()}\n      <ac-activities\n        collectionId=\"1\"\n        collectionType=\"group\">\n      </ac-activities>\n    `);\n\n    await aTimeout(150);\n  });\n\n  it('passes the a11y audit', async () => {\n    debugger;\n    await expect(element).shadowDom.to.be.accessible();\n  });\n\n  after(async () => {\n    fetchMock.reset();\n  });\n});"]}