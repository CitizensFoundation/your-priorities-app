{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,4CAA4C;AAC5C,mDAAmD;AAEnD;;;;GAIG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAU,EAAmB,EAAE;IAC3D,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC;AAC7C,CAAC,CAAC;AAKF,MAAM,UAAU,iBAAiB,CAAC,OAAoB;IACpD,OAAO;QACL,QAAQ,EAAE,CAAC,SAAiB,EAAE,EAAE;YAC9B,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QACD,WAAW,EAAE,CAAC,SAAiB,EAAE,EAAE;YACjC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACtC,CAAC;QACD,QAAQ,EAAE,CAAC,SAAiB,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC;KACvE,CAAC;AACJ,CAAC;AAED,IAAI,eAAe,GAAG,KAAK,CAAC;AAC5B,MAAM,EAAE,GAAG,GAAG,EAAE,GAAwB,CAAC,CAAC;AAC1C,MAAM,YAAY,GAA4B;IAC5C,IAAI,OAAO;QACT,eAAe,GAAG,IAAI,CAAC;QACvB,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC;AACF,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,EAAE,EAAE,YAAY,CAAC,CAAC;AACjD,QAAQ,CAAC,mBAAmB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACtC;;GAEG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,eAAe,CAAC;AAE5D,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAa,EAAE;IACxE,IAAI,aAAa,GAAG,GAAG,CAAC,aAAa,CAAC;IACtC,MAAM,IAAI,GAAc,EAAE,CAAC;IAE3B,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IAED,OAAO,aAAa,EAAE;QACpB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACzB,IAAI,aAAa,CAAC,UAAU,EAAE;YAC5B,aAAa,GAAG,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC;SACxD;aAAM;YACL,MAAM;SACP;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,OAAoB,EAAW,EAAE;IACvE,MAAM,UAAU,GAAG,qBAAqB,EAAE,CAAC;IAE3C,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;QACtB,OAAO,KAAK,CAAC;KACd;IAED,MAAM,iBAAiB,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC5D,MAAM,OAAO,GACT,IAAI,KAAK,CAAC,kBAAkB,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;IACnE,IAAI,YAAY,GAAkB,EAAE,CAAC;IACrC,MAAM,QAAQ,GAAG,CAAC,EAAS,EAAE,EAAE;QAC7B,YAAY,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IACnC,CAAC,CAAC;IAEF,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;IAC7D,iBAAiB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IACzC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;IAEhE,OAAO,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n/**\n * Determines whether a node is an element.\n *\n * @param node Node to check\n */\nexport const isNodeElement = (node: Node): node is Element => {\n  return node.nodeType === Node.ELEMENT_NODE;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Constructor<T> = new (...args: any[]) => T;\n\nexport function addHasRemoveClass(element: HTMLElement) {\n  return {\n    addClass: (className: string) => {\n      element.classList.add(className);\n    },\n    removeClass: (className: string) => {\n      element.classList.remove(className);\n    },\n    hasClass: (className: string) => element.classList.contains(className),\n  };\n}\n\nlet supportsPassive = false;\nconst fn = () => { /* empty listener */ };\nconst optionsBlock: AddEventListenerOptions = {\n  get passive() {\n    supportsPassive = true;\n    return false;\n  }\n};\ndocument.addEventListener('x', fn, optionsBlock);\ndocument.removeEventListener('x', fn);\n/**\n * Do event listeners suport the `passive` option?\n */\nexport const supportsPassiveEventListener = supportsPassive;\n\nexport const deepActiveElementPath = (doc = window.document): Element[] => {\n  let activeElement = doc.activeElement;\n  const path: Element[] = [];\n\n  if (!activeElement) {\n    return path;\n  }\n\n  while (activeElement) {\n    path.push(activeElement);\n    if (activeElement.shadowRoot) {\n      activeElement = activeElement.shadowRoot.activeElement;\n    } else {\n      break;\n    }\n  }\n\n  return path;\n};\n\nexport const doesElementContainFocus = (element: HTMLElement): boolean => {\n  const activePath = deepActiveElementPath();\n\n  if (!activePath.length) {\n    return false;\n  }\n\n  const deepActiveElement = activePath[activePath.length - 1];\n  const focusEv =\n      new Event('check-if-focused', {bubbles: true, composed: true});\n  let composedPath: EventTarget[] = [];\n  const listener = (ev: Event) => {\n    composedPath = ev.composedPath();\n  };\n\n  document.body.addEventListener('check-if-focused', listener);\n  deepActiveElement.dispatchEvent(focusEv);\n  document.body.removeEventListener('check-if-focused', listener);\n\n  return composedPath.indexOf(element) !== -1;\n};\n\nexport interface RippleInterface {\n  startPress: (e?: Event) => void;\n  endPress: () => void;\n  startFocus: () => void;\n  endFocus: () => void;\n  startHover: () => void;\n  endHover: () => void;\n}\n"]}