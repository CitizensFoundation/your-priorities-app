{"version":3,"file":"form-element.js","sourceRoot":"","sources":["form-element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;AAEH,4CAA4C;AAC5C,mDAAmD;AAGnD,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE3C,OAAO,EAAC,iBAAiB,EAAE,WAAW,EAAwD,MAAM,mBAAmB,CAAC;AAGxH,OAAO,EACL,iBAAiB,EACjB,WAAW,EAKZ,CAAC;AAYF,iEAAiE;AACjE,MAAM,eAAe,GAAG,MAAA,MAAA,MAAM,CAAC,QAAQ,0CAAE,KAAK,mCAAI,KAAK,CAAC;AAExD,qBAAqB;AACrB,MAAM,OAAgB,WAAY,SAAQ,WAAW;IAArD;;QAWE;;;WAGG;QACwB,aAAQ,GAAG,KAAK,CAAC;QAO5C;;WAEG;QACO,mBAAc,GAAyB,IAAI,CAAC;QAC5C,qBAAgB,GAAG,CAAC,EAAiB,EAAE,EAAE;YACjD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;aAC/B;QACH,CAAC,CAAC;IAmDJ,CAAC;IAjDW,eAAe;QACvB,wEAAwE;QACxE,0EAA0E;QAC1E,sBAAsB;QACtB,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,eAAe,EAAE;YACvC,OAAO,IAAI,CAAC;SACb;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAiB,CAAC;QAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC5C,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACpC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACvB,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAOQ,iBAAiB;;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC7C,MAAA,IAAI,CAAC,cAAc,0CAAE,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC3E,CAAC;IAEQ,oBAAoB;;QAC3B,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,MAAA,IAAI,CAAC,cAAc,0CAAE,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC5E,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAEQ,KAAK;QACZ,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACtC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;SAC1B;IACH,CAAC;IAEkB,YAAY;QAC7B,KAAK,CAAC,YAAY,EAAE,CAAC;QACrB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;gBAC5C,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;;AA/Ee,6BAAiB,GACZ,EAAC,IAAI,EAAE,MAAM,EAAE,cAAc,EAAE,IAAI,EAAC,CAAC;AAa/B;IAA1B,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;6CAAkB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport {property} from 'lit/decorators.js';\n\nimport {addHasRemoveClass, BaseElement, CustomEventListener, EventType, SpecificEventListener} from './base-element.js';\nimport {RippleInterface} from './utils.js';\n\nexport {\n  addHasRemoveClass,\n  BaseElement,\n  CustomEventListener,\n  EventType,\n  RippleInterface,\n  SpecificEventListener\n};\n\ndeclare global {\n  interface FormDataEvent extends Event {\n    readonly formData: FormData;\n  }\n\n  interface HTMLElementEventMap {\n    formdata: FormDataEvent;\n  }\n}\n\n// ShadyDOM should submit <input> elements in component internals\nconst USING_SHADY_DOM = window.ShadyDOM?.inUse ?? false;\n\n/** @soyCompatible */\nexport abstract class FormElement extends BaseElement {\n  static override shadowRootOptions:\n      ShadowRootInit = {mode: 'open', delegatesFocus: true};\n\n  /**\n   * Form-capable element in the component ShadowRoot.\n   *\n   * Define in your component with the `@query` decorator\n   */\n  protected abstract formElement: HTMLElement;\n\n  /**\n   * Disabled state for the component. When `disabled` is set to `true`, the\n   * component will not be added to form submission.\n   */\n  @property({type: Boolean}) disabled = false;\n\n  /**\n   * Implement ripple getter for Ripple integration with mwc-formfield\n   */\n  readonly ripple?: Promise<RippleInterface|null>;\n\n  /**\n   * Form element that contains this element\n   */\n  protected containingForm: HTMLFormElement|null = null;\n  protected formDataListener = (ev: FormDataEvent) => {\n    if (!this.disabled) {\n      this.setFormData(ev.formData);\n    }\n  };\n\n  protected findFormElement(): HTMLFormElement|null {\n    // If the component internals are not in Shadow DOM, subscribing to form\n    // data events could lead to duplicated data, which may not work correctly\n    // on the server side.\n    if (!this.shadowRoot || USING_SHADY_DOM) {\n      return null;\n    }\n    const root = this.getRootNode() as HTMLElement;\n    const forms = root.querySelectorAll('form');\n    for (const form of Array.from(forms)) {\n      if (form.contains(this)) {\n        return form;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Implement this callback to submit form data\n   */\n  protected abstract setFormData(formData: FormData): void;\n\n  override connectedCallback() {\n    super.connectedCallback();\n    this.containingForm = this.findFormElement();\n    this.containingForm?.addEventListener('formdata', this.formDataListener);\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.containingForm?.removeEventListener('formdata', this.formDataListener);\n    this.containingForm = null;\n  }\n\n  override click() {\n    if (this.formElement && !this.disabled) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  protected override firstUpdated() {\n    super.firstUpdated();\n    if (this.shadowRoot) {\n      this.mdcRoot.addEventListener('change', (e) => {\n        this.dispatchEvent(new Event('change', e));\n      });\n    }\n  }\n}\n"]}