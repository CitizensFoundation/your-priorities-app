{"version":3,"file":"observer.js","sourceRoot":"","sources":["observer.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAsBH;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAkB,EAAE,EAAE;AAC3C,8DAA8D;AAC9D,CAAC,KAAU,EAAE,QAAqB,EAAE,EAAE;IACpC,uDAAuD;IACvD,IAAI,CAAE,KAAK,CAAC,WAAiD;SACnD,UAAU,EAAE;QACpB,KAAK,CAAC,WAAW,CAAC,UAAU,GAAG,IAAI,GAAG,EAAyB,CAAC;QAChE,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC;QAClC,KAAK,CAAC,OAAO,GAAG,UACW,iBAAiC;YAC1D,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;YAC1C,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACjC,MAAM,SAAS,GACV,IAAI,CAAC,WAAiD;qBAClD,UAAU,CAAC;gBACpB,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClC,IAAI,QAAQ,KAAK,SAAS,EAAE;oBAC1B,8DAA8D;oBAC9D,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAG,IAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC1C;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QACF,8CAA8C;QAC9C,iDAAiD;KAClD;SAAM,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE;QAC1D,MAAM,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC;QAC/C,KAAK,CAAC,WAAW,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QACzC,SAAS,CAAC,OAAO;QACb,8DAA8D;QAC9D,CAAC,CAAM,EAAE,CAAc,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACzE;IACD,kBAAkB;IAClB,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACvD,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n// tslint:disable:no-any\n\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\n\n/**\n * Observer function type.\n */\nexport interface Observer {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (value: any, old: any): void;\n}\n\ntype ReactiveElementClass = typeof ReactiveElement;\ninterface ReactiveElementClassWithObservers extends ReactiveElementClass {\n  // tslint:disable-next-line:enforce-name-casing\n  _observers: Map<PropertyKey, Observer>;\n}\n\n/**\n * Specifies an observer callback that is run when the decorated property\n * changes. The observer receives the current and old value as arguments.\n */\nexport const observer = (observer: Observer) =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (proto: any, propName: PropertyKey) => {\n      // if we haven't wrapped `updated` in this class, do so\n      if (!(proto.constructor as ReactiveElementClassWithObservers)\n               ._observers) {\n        proto.constructor._observers = new Map<PropertyKey, Observer>();\n        const userUpdated = proto.updated;\n        proto.updated = function(\n            this: ReactiveElement, changedProperties: PropertyValues) {\n          userUpdated.call(this, changedProperties);\n          changedProperties.forEach((v, k) => {\n            const observers =\n                (this.constructor as ReactiveElementClassWithObservers)\n                    ._observers;\n            const observer = observers.get(k);\n            if (observer !== undefined) {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              observer.call(this, (this as any)[k], v);\n            }\n          });\n        };\n        // clone any existing observers (superclasses)\n        // eslint-disable-next-line no-prototype-builtins\n      } else if (!proto.constructor.hasOwnProperty('_observers')) {\n        const observers = proto.constructor._observers;\n        proto.constructor._observers = new Map();\n        observers.forEach(\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (v: any, k: PropertyKey) => proto.constructor._observers.set(k, v));\n      }\n      // set this method\n      proto.constructor._observers.set(propName, observer);\n    };\n"]}