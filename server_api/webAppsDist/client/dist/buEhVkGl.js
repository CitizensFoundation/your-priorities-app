import{c as e,t,d as r}from"./PTD3dyBM.js";class s extends e{constructor(e="/api/allOurIdeas"){super(),this.baseUrlPath=e}async getChoices(e,t,r){return this.fetchWrapper(this.baseUrlPath+`/${e||t}/choices/${r}${e?"/throughDomain":""}?showAll=true`)}async submitIdeasForCreation(e,t,r,s){return this.fetchWrapper(this.baseUrlPath+`/${e||t}/questions${e?"/throughDomain":""}`,{method:"POST",body:JSON.stringify({ideas:r,question:s})},!0,void 0,!0)}async startGenerateIdeas(e,t,r,s,o){return this.fetchWrapper(this.baseUrlPath+`/${t||r}/generateIdeas${t?"/throughDomain":""}`,{method:"PUT",body:JSON.stringify({currentIdeas:o,wsClientSocketId:s,question:e})},!0,void 0,!0)}async updateChoice(e,t,r,s,o){return this.fetchWrapper(this.baseUrlPath+`/${e||t}/questions/${r}/choices/${s}${e?"/throughDomain":""}`,{method:"PUT",body:JSON.stringify({data:o})},!0,void 0,!0)}async updateGroupChoice(e,t,r,s){return this.fetchWrapper(this.baseUrlPath+`/${e}/questions/${t}/choices/${r}/throughGroup`,{method:"PUT",body:JSON.stringify({data:s})},!0,void 0,!0)}async updateActive(e,t,r,s,o){return this.fetchWrapper(this.baseUrlPath+`/${e||t}/questions/${r}/choices/${s}/active${e?"/throughDomain":""}`,{method:"PUT",body:JSON.stringify({active:o})},!0,void 0,!0)}async updateName(e,t,r,s){return this.fetchWrapper(this.baseUrlPath+`/${e||t}/questions/${r}/name${e?"/throughDomain":""}`,{method:"PUT",body:JSON.stringify({name:s})},!0,void 0,!0)}async toggleIdeaActive(e,t){return this.fetchWrapper(this.baseUrlPath+`/${e}/choices/${t}/toggleActive`,{method:"PUT",body:JSON.stringify({})},!0,void 0,!0)}}var o=function(e,t,r,s){for(var o,i=arguments.length,a=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,r):s,n=e.length-1;n>=0;n--)(o=e[n])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a};let i=class extends r{constructor(e){super(),this.imageType="icon",this.hexColor=e}hexToRgb(e){e.startsWith("#")&&(e=e.slice(1));return{r:parseInt(e.slice(0,2),16),g:parseInt(e.slice(2,4),16),b:parseInt(e.slice(4,6),16)}}rgbToHsl(e,t,r){e/=255,t/=255,r/=255;const s=Math.max(e,t,r),o=Math.min(e,t,r);let i,a,n=(s+o)/2;if(s===o)i=a=0;else{const h=s-o;switch(a=n>.5?h/(2-s-o):h/(s+o),s){case e:i=(t-r)/h+(t<r?6:0);break;case t:i=(r-e)/h+2;break;case r:i=(e-t)/h+4}i/=6}return{h:360*i,s:100*a,l:100*n}}hslToHex(e,t,r){t/=100,r/=100;let s=(1-Math.abs(2*r-1))*t,o=s*(1-Math.abs(e/60%2-1)),i=r-s/2,a=0,n=0,h=0;return e>=0&&e<60?(a=s,n=o,h=0):e>=60&&e<120?(a=o,n=s,h=0):e>=120&&e<180?(a=0,n=s,h=o):e>=180&&e<240?(a=0,n=o,h=s):e>=240&&e<300?(a=o,n=0,h=s):e>=300&&e<360&&(a=s,n=0,h=o),a=Math.round(255*(a+i)).toString(16),n=Math.round(255*(n+i)).toString(16),h=Math.round(255*(h+i)).toString(16),1===a.length&&(a="0"+a),1===n.length&&(n="0"+n),1===h.length&&(h="0"+h),`#${a}${n}${h}`}getComplementaryColor(e){const{r:t,g:r,b:s}=this.hexToRgb(e),{h:o,s:i,l:a}=this.rgbToHsl(t,r,s),n=(o+180)%360;return this.hslToHex(n,i,a)}hexToColorDescription(e){e.startsWith("#")&&(e=e.slice(1));const t=parseInt(e.slice(0,2),16),r=parseInt(e.slice(2,4),16),s=parseInt(e.slice(4,6),16),o=Math.max(t,r,s),i=t===o,a=r===o,n=s===o;let h="";return i&&a&&n?h="gray":i&&a?h="yello":i&&n?h="purple":a&&n?h="cyan":i?h="red":a?h="green":n&&(h="blue"),o>200?h="light "+h:o<55&&(h="dark "+h),h}get promptDraft(){const e=this.getComplementaryColor(this.hexColor);return`Very simple cartoon icon.\n\nUse a simple color scheme based on ${this.hexToColorDescription(this.hexColor)} background and ${this.hexToColorDescription(e)} foreground. No text.\n`}async generateImage(){return new Promise(((e,t)=>{const r=t=>{this.removeEventListener("got-image",r),this.removeEventListener("image-generation-error",s),console.error("Got image",t.detail),e(t.detail)},s=e=>{this.removeEventListener("got-image",r),this.removeEventListener("image-generation-error",s),t(e.detail)};this.addEventListener("got-image",r),this.addEventListener("image-generation-error",s),this.submit().catch((e=>{this.removeEventListener("got-image",r),this.removeEventListener("image-generation-error",s),t(e)}))}))}get finalPrompt(){return this.promptFromUser}async generateIcon(e,t){return t=`Text to create tiny icon from: ${e}\nIcon style: ${t}`,this.promptFromUser=t,await this.generateImage()}};i=o([t("aoi-generate-ai-logos")],i);export{s as A,i as a};
