version: '3.9'
x-your-priorities-app-common: &your-priorities-app-common
  build: ./your-priorities-app/
  env_file: .env
  restart: unless-stopped
  build:
    context: ../../.
    dockerfile: deployment/docker/your-priorities-app/Dockerfile
  image: your-priorities-app:current
  volumes:
    - client-app-dist:/usr/src/your-priorities/client/build/bundle
    - admin-app-dist:/usr/src/your-priorities/admin_app/dist
    - analytics-app-dist:/usr/src/your-priorities/analytics_app/dist
  command: node --optimize_for_size --max_old_space_size=460 server_api/api_app.js
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8080/api/users/has/AutoTranslation"]
    interval: 30s
    timeout: 20s
    retries: 3
  network_mode: host
  logging:
    driver: "json-file"
    options:
      max-file: "2000"
      max-size: "25m"

x-your-priorities-worker-common: &your-priorities-worker-common
  container_name: your-priorities-worker
  build: ./your-priorities-worker/
  restart: unless-stopped
  env_file: .env
  build:
    context: ../../.
    dockerfile: deployment/docker/your-priorities-worker/Dockerfile
  restart: unless-stopped
  command: node --optimize_for_size --max_old_space_size=960 server_api/active-citizen/workers/main.js
  network_mode: host
  logging:
    driver: "json-file"
    options:
      max-file: "1000"
      max-size: "25m"

services:
  webserver:
    container_name: webserver
    restart: unless-stopped
    env_file: .env
    build:
      context: ./webserver/
      dockerfile: Dockerfile
      args:
        - CERTBOT_CERT_FOLDER=${CERTBOT_CERT_FOLDER}
    #ports:
    #  - "80:80"
    #  - "443:443"
    volumes:
      - ./webserver/templates:/etc/nginx/templates
      - certbot-env:/etc/letsencrypt/
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
      - client-app-dist:/usr/src/your-priorities/client/build/bundle
      - admin-app-dist:/usr/src/your-priorities/admin_app/dist
      - analytics-app-dist:/usr/src/your-priorities/analytics_app/dist
    healthcheck:
      test: ["CMD", "curl", "-f", "https://${FULL_HOSTNAME}/api/users/has/AutoTranslation"]
      interval: 30s
      timeout: 20s
      retries: 3
    network_mode: host
    logging:
      driver: "json-file"
      options:
        max-file: "2000"
        max-size: "25m"

  your-priorities-app1:
    <<: *your-priorities-app-common
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/users/has/AutoTranslation"]
    environment:
      - PORT=8080

  your-priorities-app2:
    <<: *your-priorities-app-common
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/users/has/AutoTranslation"]
    environment:
      - PORT=8081

  your-priorities-app3:
    <<: *your-priorities-app-common
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/users/has/AutoTranslation"]
    environment:
      - PORT=8082

  your-priorities-app4:
    <<: *your-priorities-app-common
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/api/users/has/AutoTranslation"]
    environment:
      - PORT=8083

  your-priorities-app5:
    <<: *your-priorities-app-common
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/api/users/has/AutoTranslation"]
    environment:
      - PORT=8084

  your-priorities-worker1:
    <<: *your-priorities-worker-common

  your-priorities-worker2:
    <<: *your-priorities-worker-common

  your-priorities-encoder:
    container_name: your-priorities-encoder
    build: ./your-priorities-encoder/
    restart: unless-stopped
    env_file: .env
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    command: node out-tsc/worker.js
    network_mode: host
    logging:
      driver: "json-file"
      options:
        max-file: "100"
        max-size: "25m"

  minio:
    image: minio/minio
    restart: unless-stopped
    env_file: .env
    volumes:
      - ./minio_data:/minio_data
    expose:
      - "9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_HTTP_TRACE: /dev/stdout
    command: server --address localhost:9000 /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    network_mode: host
    logging:
      driver: "json-file"
      options:
        max-file: "100"
        max-size: "25m"

  ac-analytics-api:
    container_name: ac-analytics-api
    build: ./ac-analytics-api/
    env_file: .env
    restart: unless-stopped
    environment:
      - PORT=8888
      - HOST=localhost
    volumes:
      - ./rec_models:/ac-analytics-api/rec_models
      - ./d2v_models:/ac-analytics-api/d2v_models
    expose:
      - "8888"
    healthcheck:
      test: ["CMD", "curl", "-H","X-API-KEY: ${AC_ANALYTICS_KEY}","-f", "http://localhost:8888/api/v1/healthcheck"]
      interval: 30s
      timeout: 20s
      retries: 3
    network_mode: host
    logging:
      driver: "json-file"
      options:
        max-file: "100"
        max-size: "25m"

  ac-analytics-worker:
    container_name: ac-analytics-worker
    build: ./ac-analytics-worker/
    env_file: .env
    volumes:
      - ./rec_models:/ac-analytics-api/rec_models
      - ./d2v_models:/ac-analytics-api/d2v_models
    restart: unless-stopped
    command: python3 worker.py
    network_mode: host
    logging:
      driver: "json-file"
      options:
        max-file: "100"
        max-size: "25m"

  mc:
    image: minio/mc:latest
    depends_on:
     - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add --quiet --api s3v4 local https://${FULL_HOSTNAME} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb --quiet local/${S3_AUDIO_UPLOAD_BUCKET}/;
      /usr/bin/mc mb --quiet local/${S3_AUDIO_PUBLIC_BUCKET}/;
      /usr/bin/mc policy set public local/${S3_AUDIO_PUBLIC_BUCKET};
      /usr/bin/mc mb --quiet local/${S3_VIDEO_UPLOAD_BUCKET}/;
      /usr/bin/mc mb --quiet local/${S3_VIDEO_PUBLIC_BUCKET}/;
      /usr/bin/mc policy set public local/${S3_VIDEO_PUBLIC_BUCKET};
      /usr/bin/mc mb --quiet local/${S3_VIDEO_THUMBNAIL_BUCKET}/;
      /usr/bin/mc policy set public local/${S3_VIDEO_THUMBNAIL_BUCKET};
      /usr/bin/mc mb --quiet local/${S3_ATTACHMENTS_BUCKET}/;
      /usr/bin/mc policy set public local/${S3_ATTACHMENTS_BUCKET};
      /usr/bin/mc mb --quiet local/${S3_REPORTS_BUCKET}/;
      /usr/bin/mc mb --quiet local/${S3_BUCKET}/;
      /usr/bin/mc policy set public local/${S3_BUCKET};
      "

  certbot:
    image: certbot/certbot
    container_name: certbot
    env_file: .env
    volumes:
      - certbot-env:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - webserver

volumes:
  certbot-var:
  client-app-dist:
  admin-app-dist:
  analytics-app-dist:
  web-root:
  data1-1:
  data1-2:
  certbot-env:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: webserver/letsEncryptCerts

