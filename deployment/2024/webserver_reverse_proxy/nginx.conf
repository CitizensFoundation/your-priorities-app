# Load GeoIP2 module
load_module modules/ngx_http_geoip2_module.so;

events {
  worker_connections  1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  include /etc/nginx/cloudflare_ips.conf;

  gzip on;
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 5;
  gzip_types text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

  # GeoIP2 database configuration
  geoip2 /etc/nginx/geoip/GeoLite2-Country.mmdb {
    auto_reload 5m;
    $geoip2_data_country_code country iso_code;
    $geoip2_data_country_name country names en;
  }

  log_format css_debug '$remote_addr - $remote_user [$time_local] '
                     '"$request" $status $body_bytes_sent '
                     '"$http_referer" "$http_user_agent" '
                     'File: $request_filename '
                     'Size: $content_length';

  # Custom log format with country information
  log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$geoip2_data_country_code" "$geoip2_data_country_name"';

  access_log /var/log/nginx/access.log custom;

  # Map to set default language based on country code
  map $geoip2_data_country_code $lang {
    default en;
    IS is;
    # Add more country code to language mappings as needed
  }

  # Map to determine language preference
  map $cookie_lang $lang_pref {
    default $lang;
    ~^(en|is)$ $1;
  }

  upstream nodejs {
    server 127.0.0.1:9080;
  }

  server {
    listen 80;
    server_name _;
    large_client_header_buffers 4 32k;
    client_max_body_size 256M;
    return 301 https://$server_name$request_uri;
  }

 server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;

    server_name evoly.ai www.evoly.ai;

    large_client_header_buffers 4 32k;
    client_max_body_size 256M;

    ssl_certificate /root/bundle.pem;
    ssl_certificate_key /root/private.pem;

    root /static_website;  # Base path to the static website

    # Handling CSS files
    location ~* \.css$ {
        gzip_static on;
        try_files /$lang_pref/css$uri /en/css$uri $uri =404;
        expires 30d;
        add_header Cache-Control "public, no-transform";
        add_header Content-Type text/css always;
        add_header X-Debug-Message "$document_root$uri" always;
        access_log /var/log/nginx/css_debug.log css_debug;
    }

    # Handling image and JS files
    location ~* \.(js|jpg|jpeg|png|gif|ico|svg)$ {
        gzip_static on;
        try_files $uri =404;
        expires 30d;
    }

    # Language handling
    location / {
        # Check if a specific language is requested in the URL
        if ($uri !~ ^/(en|is)/) {
            # If no language specified, redirect based on cookie or GeoIP
            return 302 /$lang_pref$uri;
        }

        # Try files in the language-specific directory
        try_files $uri $uri/ /$1/index.html /en/index.html =404;
    }

    # Serve language-specific content
    location ~ ^/(en|is)/ {
        try_files $uri $uri/ /$1/index.html /en/index.html =404;
    }

    # Set language preference
    location /set-language {
        if ($arg_lang ~ ^(en|is)$) {
            add_header Set-Cookie "lang=$arg_lang; Path=/; Max-Age=31536000; HttpOnly; Secure" always;
            add_header Cache-Control "no-cache";
            return 302 $http_referer;
        }
        return 400;
    }

    # Common security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Add country information to headers
    add_header X-Country-Code $geoip2_data_country_code always;
    add_header X-Country-Name $geoip2_data_country_name always;
  }


  server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name ~^(?!www\.evoly\.ai$)(?!evoly\.ai$).*\.evoly\.ai$;

    large_client_header_buffers 4 32k;
    client_max_body_size 256M;

    ssl_certificate /root/bundle.pem;
    ssl_certificate_key /root/private.pem;

    root /home/node/app/webApps/client/dist;

    location / {
      proxy_set_header Host $http_host;
      proxy_pass http://nodejs;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-NginX-Proxy true;

      # Add country information to headers for backend
      proxy_set_header X-Country-Code $geoip2_data_country_code;
      proxy_set_header X-Country-Name $geoip2_data_country_name;

      # WebSocket specific
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    location ^~ /public/storage/ {
      expires 365d;
      add_header Cache-Control "public";
    }

    # Common security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Add country information to headers
    add_header X-Country-Code $geoip2_data_country_code always;
    add_header X-Country-Name $geoip2_data_country_name always;
  }
}