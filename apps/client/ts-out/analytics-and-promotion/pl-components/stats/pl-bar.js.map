{"version":3,"file":"pl-bar.js","sourceRoot":"","sources":["../../../../src/analytics-and-promotion/pl-components/stats/pl-bar.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAc,GAAG,EAAE,IAAI,EAAW,MAAM,KAAK,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAC5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AAE1D,SAAS,QAAQ,CACf,KAAa,EACb,GAAkC,EAClC,IAAY;IAEZ,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAE1B,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,aAAa;QACb,IAAI,GAAG,GAAG,MAAM;YAAE,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC;AAChC,CAAC;AAGM,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,oBAAoB;IAA/C;;QAWL,SAAI,GAAG,UAAU,CAAC;IA2CpB,CAAC;IAtCC,MAAM,KAAc,MAAM;QACxB,OAAO;YACL,GAAG,KAAK,CAAC,MAAM;YACf,GAAG,CAAA;;;;;;;;;;;;OAYF;YAED,GAAG,CAAA,EAAE;SACN,CAAC;IACJ,CAAC;IAEQ,MAAM;QACb,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACxD,OAAO,IAAI,CAAA;;;sDAGuC,IAAI,CAAC,iBAAiB;;;mBAGzD,6CACP,IAAI,CAAC,EAAE,IAAI,EACb,EAAE;2BACe,KAAK;;;;KAI3B,CAAC;IACJ,CAAC;CACF,CAAA;AApDC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;2CACZ;AAGf;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;yCACU;AAGpC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;uDACA;AAG3B;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;0CACT;AAGlB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;wCACJ;AAdZ,YAAY;IADxB,aAAa,CAAC,QAAQ,CAAC;GACX,YAAY,CAsDxB","sourcesContent":["import { LitElement, css, html, nothing } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { PlausibleBaseElement } from '../pl-base-element';\n\nfunction barWidth(\n  count: number,\n  all: Array<Record<string, number>>,\n  plot: string\n) {\n  let maxVal = all[0][plot];\n\n  for (const val of all) {\n    // @ts-ignore\n    if (val > maxVal) maxVal = val[plot];\n  }\n\n  return (count / maxVal) * 100;\n}\n\n@customElement('pl-bar')\nexport class PlausibleBar extends PlausibleBaseElement {\n  @property({ type: Number })\n  count!: number;\n\n  @property({ type: Array })\n  all!: Array<Record<string, number>>;\n\n  @property({ type: String })\n  maxWidthDeduction!: string;\n\n  @property({ type: String })\n  plot = 'visitors';\n\n  @property({ type: String })\n  bg: string | undefined;\n\n  static override get styles() {\n    return [\n      ...super.styles,\n      css`\n        :host {\n          width: 90%;\n        }\n\n        .faviconMargin {\n          margin-left: 30px;\n        }\n\n        .rounded {\n          border-radius: 12px;\n        }\n      `,\n\n      css``,\n    ];\n  }\n\n  override render() {\n    const width = barWidth(this.count, this.all, this.plot);\n    return html`\n      <div\n        class=\"w-full relative\"\n        .not-used-old-style=\"max-width: calc(100% - ${this.maxWidthDeduction});\"\n      >\n        <div\n          class=\"${`absolute top-0 left-0 h-full test rounded ${\n            this.bg || ''\n          }`}\"\n          .style=\"width: ${width}%;\"\n        ></div>\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n"]}