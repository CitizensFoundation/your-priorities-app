{"version":3,"file":"yp-post-points.test.js","sourceRoot":"","sources":["../../../src/yp-post/test/yp-post-points.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAGnE,OAAO,sBAAsB,CAAC;AAC9B,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAE/D,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,OAAqB,CAAC;IAC1B,IAAI,SAAc,CAAC;IAEnB,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,SAAS,GAAG,aAAa,CAAC,YAAY,EAAE,CAAC;QACzC,MAAM,aAAa,CAAC,QAAQ,EAAE,CAAC;QAE/B,MAAM,cAAc,GAAG;YACrB,KAAK,EAAE,CAAC;YACR,MAAM,EAAE;gBACN;oBACE,EAAE,EAAE,CAAC;oBACL,OAAO,EAAE,QAAQ;oBACjB,UAAU,EAAE,IAAI,IAAI,EAAE;oBACtB,kBAAkB,EAAE,CAAC;oBACrB,oBAAoB,EAAE,CAAC;oBACvB,WAAW,EAAE,EAAE;oBACf,KAAK,EAAE,CAAC,CAAC;oBAET,cAAc,EAAE;wBACd;4BACE,EAAE,EAAE,CAAC;4BACL,OAAO,EAAE,QAAQ;yBAClB;qBACF;iBACF;gBACD;oBACE,EAAE,EAAE,CAAC;oBACL,kBAAkB,EAAE,CAAC;oBACrB,oBAAoB,EAAE,CAAC;oBACvB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACpC,WAAW,EAAE,EAAE;oBACf,OAAO,EAAE,SAAS;oBAClB,KAAK,EAAE,CAAC;oBACR,cAAc,EAAE;wBACd;4BACE,EAAE,EAAE,CAAC;4BACL,OAAO,EAAE,SAAS;yBACnB;qBACF;iBACF;gBACD;oBACE,EAAE,EAAE,CAAC;oBACL,kBAAkB,EAAE,CAAC;oBACrB,oBAAoB,EAAE,CAAC;oBACvB,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACpC,WAAW,EAAE,EAAE;oBACf,OAAO,EAAE,SAAS;oBAClB,KAAK,EAAE,CAAC,CAAC;oBACT,cAAc,EAAE;wBACd;4BACE,EAAE,EAAE,CAAC;4BACL,OAAO,EAAE,SAAS;yBACnB;qBACF;iBACF;aACF;SACqB,CAAA;QAExB,SAAS,CAAC,GAAG,CAAC,qBAAqB,EAAC,cAAc,EAAE,aAAa,CAAC,eAAe,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAGH,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,OAAO,GAAG,MAAM,OAAO,CAAC,IAAI,CAAA;QACxB,aAAa,CAAC,kBAAkB,EAAE;;iBAEzB,aAAa,CAAC,OAAO,EAAE;;KAEnC,CAAC,CAAC;QACH,MAAM,QAAQ,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,QAAQ,CAAC;QACT,MAAM,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { html, fixture, expect, aTimeout } from '@open-wc/testing';\n\nimport { YpPostPoints } from '../yp-post-points.js';\nimport '../yp-post-points.js';\nimport { YpTestHelpers } from '../../common/test/setup-app.js';\n\ndescribe('YpPostPoints', () => {\n  let element: YpPostPoints;\n  let fetchMock: any;\n\n  before(async () => {\n    fetchMock = YpTestHelpers.getFetchMock();\n    await YpTestHelpers.setupApp();\n\n    const pointsResponse = {\n      count: 0,\n      points: [\n        {\n          id: 1,\n          content: \"okokok\",\n          created_at: new Date(),\n          counter_quality_up: 1,\n          counter_quality_down: 2,\n          public_data: {},\n          value: -1,\n\n          PointRevisions: [\n            {\n              id: 1,\n              content: \"jokoko\",\n            }\n          ]\n        },\n        {\n          id: 2,\n          counter_quality_up: 1,\n          counter_quality_down: 2,\n          created_at: new Date().toISOString(),\n          public_data: {},\n          content: \"oko1kok\",\n          value: 1,\n          PointRevisions: [\n            {\n              id: 2,\n              content: \"jok1oko\"\n            }\n          ]\n        },\n        {\n          id: 3,\n          counter_quality_up: 1,\n          counter_quality_down: 4,\n          created_at: new Date().toISOString(),\n          public_data: {},\n          content: \"oko1kok\",\n          value: -1,\n          PointRevisions: [\n            {\n              id: 3,\n              content: \"jok1oko\"\n            }\n          ]\n        }\n      ]\n    } as YpGetPointsResponse\n\n    fetchMock.get('/api/posts/1/points',pointsResponse, YpTestHelpers.fetchMockConfig);\n  });\n\n\n  beforeEach(async () => {\n    element = await fixture(html`\n      ${YpTestHelpers.renderCommonHeader()}\n      <yp-post-points\n        .post=\"${YpTestHelpers.getPost()}\"\n      ></yp-post-points>\n    `);\n    await aTimeout(100);\n  });\n\n  it('passes the a11y audit', async () => {\n    debugger;\n    await expect(element).shadowDom.to.be.accessible();\n  });\n});\n"]}