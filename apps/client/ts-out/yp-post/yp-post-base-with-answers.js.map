{"version":3,"file":"yp-post-base-with-answers.js","sourceRoot":"","sources":["../../src/yp-post/yp-post-base-with-answers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { YpBaseElement } from '../common/yp-base-element.js';\nimport { YpAccessHelpers } from '../common/YpAccessHelpers.js';\nimport { YpSurveyHelpers } from '../yp-survey/YpSurveyHelpers.js';\n\ntype Constructor<T> = new (...args: any[]) => T;\n\nexport declare class YpPostBaseWithAnswersInterface {\n  autoTranslate: boolean;\n  translatedQuestions: string[] | undefined;\n  post: YpPostData | undefined;\n  translatedAnswers: string[] | undefined;\n  addGlobalListener?: Function;\n  structuredAnswersFormatted: string;\n  getIndexTranslationKey: Function;\n}\n\nexport const YpPostBaseWithAnswers = <T extends Constructor<YpBaseElement>>(\n  superClass: T\n) => {\n  class YpPostBaseWithAnswersElement extends superClass {\n    @property({ type: Array })\n    translatedQuestions: string[] | undefined;\n\n    @property({ type: Array })\n    translatedAnswers: string[] | undefined;\n\n    @property({ type: Boolean })\n    autoTranslate = false;\n\n    @property({ type: Object })\n    post: YpPostData | undefined;\n\n    override connectedCallback() {\n      super.connectedCallback();\n      if (window.autoTranslate) {\n        this.autoTranslate = true;\n      }\n      this.addGlobalListener(\n        'yp-auto-translate',\n        this._autoTranslateEvent.bind(this)\n      );\n\n      setTimeout(()=>{\n        this._getSurveyTranslationsIfNeeded();\n      }, 100)\n    }\n\n    override disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeGlobalListener(\n        'yp-auto-translate',\n        this._autoTranslateEvent.bind(this)\n      );\n    }\n\n    _autoTranslateEvent(event: CustomEvent) {\n      this.autoTranslate = event.detail;\n      this._getSurveyTranslationsIfNeeded();\n    }\n\n    override _languageEvent(event: CustomEvent) {\n      super._languageEvent(event);\n      this._getSurveyTranslationsIfNeeded();\n    }\n\n    async _getSurveyTranslationsIfNeeded() {\n      this.translatedQuestions = undefined;\n      this.translatedAnswers = undefined;\n      if (\n        this.post &&\n        this.post.public_data &&\n        this.post.public_data.structuredAnswersJson &&\n        this.autoTranslate &&\n        this.language !== this.post.language\n      ) {\n        const questionsIndexKey =\n          this.getIndexTranslationKey('GroupQuestions');\n        const answersIndexKey = this.getIndexTranslationKey('PostAnswers');\n        if (\n          window.appGlobals.cache.autoTranslateCache[questionsIndexKey] &&\n          window.appGlobals.cache.autoTranslateCache[answersIndexKey]\n        ) {\n          this.translatedQuestions = window.appGlobals.cache.autoTranslateCache[\n            questionsIndexKey\n          ] as string[];\n          this.translatedAnswers = window.appGlobals.cache.autoTranslateCache[\n            answersIndexKey\n          ] as string[];\n        } else {\n          const translatedResponse =\n            (await window.serverApi.getSurveyTranslations(\n              this.post,\n              this.language!\n            )) as string[][];\n\n          if (\n            this.post &&\n            this.autoTranslate &&\n            (this.language !== this.post.language || this.post.language == '??')\n          ) {\n            const translatedQuestionTexts = translatedResponse[0];\n            const translatedAnswerTexts = translatedResponse[1];\n            const currentQuestions = JSON.parse(\n              JSON.stringify(\n                this.post.Group.configuration.structuredQuestionsJson\n              )\n            );\n            const currentAnswers = JSON.parse(\n              JSON.stringify(this.post.public_data.structuredAnswersJson)\n            );\n\n            if (\n              translatedQuestionTexts.length ===\n              YpSurveyHelpers.getQuestionLengthWithSubOptions(currentQuestions)\n            ) {\n              let translationCounter = 0;\n              for (let i = 0; i < currentQuestions.length; i++) {\n                const question = currentQuestions[i];\n                question.text = translatedQuestionTexts[translationCounter++];\n\n                if (\n                  question.type === 'radios' &&\n                  question.radioButtons &&\n                  question.radioButtons.length > 0\n                ) {\n                  translationCounter += question.radioButtons.length;\n                } else if (\n                  question.type === 'checkboxes' &&\n                  question.checkboxes &&\n                  question.checkboxes.length > 0\n                ) {\n                  translationCounter += question.checkboxes.length;\n                } else if (\n                  question.type === 'dropdown' &&\n                  question.dropdownOptions &&\n                  question.dropdownOptions.length > 0\n                ) {\n                  translationCounter += question.dropdownOptions.length;\n                }\n              }\n\n              for (let i = 0; i < currentAnswers.length; i++) {\n                if (currentAnswers[i].value) {\n                  currentAnswers[i].value = translatedAnswerTexts[i];\n                }\n              }\n\n              this.translatedQuestions = currentQuestions;\n              this.translatedAnswers = currentAnswers;\n\n              const questionsIndexKey =\n                this.getIndexTranslationKey('GroupQuestions');\n              const answersIndexKey =\n                this.getIndexTranslationKey('PostAnswers');\n\n              window.appGlobals.cache.autoTranslateCache[questionsIndexKey] =\n                currentQuestions;\n              window.appGlobals.cache.autoTranslateCache[answersIndexKey] =\n                currentAnswers;\n            } else {\n              console.error(\n                'Questions and Translated texts length does not match'\n              );\n            }\n          } else {\n            this.translatedQuestions = undefined;\n            this.translatedAnswers = undefined;\n          }\n        }\n      }\n    }\n\n    getIndexTranslationKey(textType: string) {\n      return `${textType}-${this.post!.id}-${this.language}`;\n    }\n\n    get structuredAnswersFormatted() {\n      if (\n        this.post &&\n        this.post.public_data &&\n        this.post.public_data.structuredAnswersJson &&\n        this.post.Group.configuration &&\n        this.post.Group.configuration.structuredQuestionsJson\n      ) {\n        const questionHash: Record<string, YpStructuredQuestionData> = {};\n        const showDescriptionBeforeIdHash: Record<\n          string,\n          YpStructuredQuestionData\n        > = {};\n        const showDescriptionAfterIdHash: Record<\n          string,\n          YpStructuredQuestionData\n        > = {};\n        let outText = '';\n        this.post.Group.configuration.structuredQuestionsJson.forEach(\n          question => {\n            if (question.uniqueId) {\n              questionHash[question.uniqueId] = question;\n            } else {\n              if (question.showBeforeAnswerId) {\n                showDescriptionBeforeIdHash[question.showBeforeAnswerId] =\n                  question;\n              }\n\n              if (question.showAfterAnswerId) {\n                showDescriptionAfterIdHash[question.showAfterAnswerId] =\n                  question;\n              }\n            }\n          }\n        );\n\n        this.post.public_data.structuredAnswersJson.forEach(answer => {\n          if (answer && answer.value) {\n            const question = questionHash[answer.uniqueId];\n            if (question) {\n              if (showDescriptionBeforeIdHash[answer.uniqueId]) {\n                outText +=\n                  showDescriptionBeforeIdHash[answer.uniqueId].text + '\\n\\n';\n              }\n              outText += '<b>' + question.text + '</b>\\n';\n\n              if (answer.value) {\n                outText += answer.value + '\\n\\n';\n              } else {\n                outText += '\\n\\n';\n              }\n\n              if (showDescriptionAfterIdHash[answer.uniqueId]) {\n                outText +=\n                  showDescriptionAfterIdHash[answer.uniqueId].text + '\\n\\n';\n              }\n            }\n          }\n        });\n\n        return outText;\n      } else {\n        return '';\n      }\n    }\n  }\n  return YpPostBaseWithAnswersElement as Constructor<YpPostBaseWithAnswersInterface> &\n    T;\n};\n"]}